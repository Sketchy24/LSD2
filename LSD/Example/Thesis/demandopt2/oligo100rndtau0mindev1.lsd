	
Label Root
{
	Son: Demand
	Label Demand
	{
		Son: Group
		Label Group
		{
			Son: Agent
			Label Agent
			{
				Son: AgCh
				Label AgCh
				{
					Param: AIdCh
					Param: ARank
					Param: AProb
					Param: AValue
					Param: Minimum
					Param: QualityType
					Param: tau

				}

				Param: IdAgent
				Param: IdParent
				Param: CurrCont
				Param: MaxCont
				Param: Active
				Param: Date
				Param: IdChoice
				Var: Deviation

			}

			Param: TimeActive
			Param: NumContagion
			Param: RadioReduction
			Param: IdDemand
			Var: IssuerId
			Param: TimeRepl
			Param: NoNewAgent
			Param: CoeffDeviation
			Param: MaxDeviation
			Param: MinDeviation
			Param: Delta

		}

		Var: Action
		Var: ActionReplace
		Var: TotAgent
		Param: AvDeviation

	}

	Son: Supply
	Label Supply
	{
		Son: Prod
		Label Prod
		{
			Son: Ch
			Label Ch
			{
				Param: IdCh
				Param: Rank
				Param: App
				Param: Value
				Param: obs_x

			}

			Var: MS
			Param: IdProd
			Param: Num
			Param: Mark
			Var: InstallBase
			Param: Cancelled
			Param: PercNew
			Param: PercCan
			Var: MSInstall
			Param: app
			Param: ChUsed
			Param: curr_x

		}

		Var: Choose
		Param: MinProb
		Var: InvHerfindal
		Func: SetARank
		Var: ChooseTTB
		Param: RangeRank
		Var: TotNum
		Var: Adopt
		Param: CounterChUsed
		Var: AvChUsed
		Func: TTB

	}

	Var: Init
	Var: ResetNum

}


DATA

Object: Root C	1
Var: Init 0 n + n n
Var: ResetNum 0 n + n n

Object: Demand C	1
Var: Action 0 n + d n
Var: ActionReplace 0 s + n n
Var: TotAgent 1 s + n n	1
Param: AvDeviation 0 s + n n	0

Object: Group N	1
Param: TimeActive 0 n + n n	-10
Param: NumContagion 0 n + n n	7
Param: RadioReduction 0 n + n n	1
Param: IdDemand 0 n + n n	1
Var: IssuerId 1 n + n n	0
Param: TimeRepl 0 n + n n	20
Param: NoNewAgent 0 n + n n	0
Param: CoeffDeviation 0 n + n n	0.05
Param: MaxDeviation 0 n + n n	200
Param: MinDeviation 0 n + n n	1
Param: Delta 0 n + n n	1

Object: Agent C	1
Param: IdAgent 0 n + n n	-1
Param: IdParent 0 n + n n	-1
Param: CurrCont 0 n + n n	0
Param: MaxCont 0 n + n n	0
Param: Active 0 n + n n	1
Param: Date 0 n + n n	0
Param: IdChoice 0 n + n n	0
Var: Deviation 1 n + n n	0.01

Object: AgCh N	10
Param: AIdCh 0 n + n n	1	2	3	4	5	6	7	8	9	10
Param: ARank 0 n + n n	0	0	0	0	0	0	0	0	0	0
Param: AProb 0 n + n n	0	0	0	0	0	0	0	0	0	0
Param: AValue 0 n + n n	0	0	0	0	0	0	0	0	0	0
Param: Minimum 0 n + n n	0	0	0	0	0	0	0	0	0	0
Param: QualityType 0 n + n n	1	1	1	1	1	1	1	1	1	1
Param: tau 0 n + n n	1	1	1	1	1	1	1	1	1	1

Object: Supply C	1
Var: Choose 0 n + n n
Param: MinProb 0 n + n n	0.0001
Var: InvHerfindal 0 s + n n
Func: SetARank 0 n + d n
Var: ChooseTTB 0 n + n n
Param: RangeRank 0 n + n n	0
Var: TotNum 0 s + n n
Var: Adopt 0 n + n n
Param: CounterChUsed 0 n + n n	0
Var: AvChUsed 0 s + n n
Func: TTB 0 n + d n

Object: Prod C	100
Var: MS 1 n + n n	0.01	0.01	0.01	0.01	0.01	0.01	0.01	0.01	0.01	0.01	0.01	0.01	0.01	0.01	0.01	0.01	0.01	0.01	0.01	0.01	0.01	0.01	0.01	0.01	0.01	0.01	0.01	0.01	0.01	0.01	0.01	0.01	0.01	0.01	0.01	0.01	0.01	0.01	0.01	0.01	0.01	0.01	0.01	0.01	0.01	0.01	0.01	0.01	0.01	0.01	0.01	0.01	0.01	0.01	0.01	0.01	0.01	0.01	0.01	0.01	0.01	0.01	0.01	0.01	0.01	0.01	0.01	0.01	0.01	0.01	0.01	0.01	0.01	0.01	0.01	0.01	0.01	0.01	0.01	0.01	0.01	0.01	0.01	0.01	0.01	0.01	0.01	0.01	0.01	0.01	0.01	0.01	0.01	0.01	0.01	0.01	0.01	0.01	0.01	0.01
Param: IdProd 0 n + n n	1	2	3	4	5	6	7	8	9	10	11	12	13	14	15	16	17	18	19	20	21	22	23	24	25	26	27	28	29	30	31	32	33	34	35	36	37	38	39	40	41	42	43	44	45	46	47	48	49	50	51	52	53	54	55	56	57	58	59	60	61	62	63	64	65	66	67	68	69	70	71	72	73	74	75	76	77	78	79	80	81	82	83	84	85	86	87	88	89	90	91	92	93	94	95	96	97	98	99	100
Param: Num 0 n + n n	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
Param: Mark 0 n + n n	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
Var: InstallBase 1 s + n p	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
Param: Cancelled 0 n + n n	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
Param: PercNew 0 n + n n	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
Param: PercCan 0 n + n n	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
Var: MSInstall 1 s + n n	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1
Param: app 0 n + n n	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
Param: ChUsed 0 n + n n	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
Param: curr_x 0 n + n n	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0

Object: Ch C	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10
Param: IdCh 0 n + n n	1	2	3	4	5	6	7	8	9	10	1	2	3	4	5	6	7	8	9	10	1	2	3	4	5	6	7	8	9	10	1	2	3	4	5	6	7	8	9	10	1	2	3	4	5	6	7	8	9	10	1	2	3	4	5	6	7	8	9	10	1	2	3	4	5	6	7	8	9	10	1	2	3	4	5	6	7	8	9	10	1	2	3	4	5	6	7	8	9	10	1	2	3	4	5	6	7	8	9	10	1	2	3	4	5	6	7	8	9	10	1	2	3	4	5	6	7	8	9	10	1	2	3	4	5	6	7	8	9	10	1	2	3	4	5	6	7	8	9	10	1	2	3	4	5	6	7	8	9	10	1	2	3	4	5	6	7	8	9	10	1	2	3	4	5	6	7	8	9	10	1	2	3	4	5	6	7	8	9	10	1	2	3	4	5	6	7	8	9	10	1	2	3	4	5	6	7	8	9	10	1	2	3	4	5	6	7	8	9	10	1	2	3	4	5	6	7	8	9	10	1	2	3	4	5	6	7	8	9	10	1	2	3	4	5	6	7	8	9	10	1	2	3	4	5	6	7	8	9	10	1	2	3	4	5	6	7	8	9	10	1	2	3	4	5	6	7	8	9	10	1	2	3	4	5	6	7	8	9	10	1	2	3	4	5	6	7	8	9	10	1	2	3	4	5	6	7	8	9	10	1	2	3	4	5	6	7	8	9	10	1	2	3	4	5	6	7	8	9	10	1	2	3	4	5	6	7	8	9	10	1	2	3	4	5	6	7	8	9	10	1	2	3	4	5	6	7	8	9	10	1	2	3	4	5	6	7	8	9	10	1	2	3	4	5	6	7	8	9	10	1	2	3	4	5	6	7	8	9	10	1	2	3	4	5	6	7	8	9	10	1	2	3	4	5	6	7	8	9	10	1	2	3	4	5	6	7	8	9	10	1	2	3	4	5	6	7	8	9	10	1	2	3	4	5	6	7	8	9	10	1	2	3	4	5	6	7	8	9	10	1	2	3	4	5	6	7	8	9	10	1	2	3	4	5	6	7	8	9	10	1	2	3	4	5	6	7	8	9	10	1	2	3	4	5	6	7	8	9	10	1	2	3	4	5	6	7	8	9	10	1	2	3	4	5	6	7	8	9	10	1	2	3	4	5	6	7	8	9	10	1	2	3	4	5	6	7	8	9	10	1	2	3	4	5	6	7	8	9	10	1	2	3	4	5	6	7	8	9	10	1	2	3	4	5	6	7	8	9	10	1	2	3	4	5	6	7	8	9	10	1	2	3	4	5	6	7	8	9	10	1	2	3	4	5	6	7	8	9	10	1	2	3	4	5	6	7	8	9	10	1	2	3	4	5	6	7	8	9	10	1	2	3	4	5	6	7	8	9	10	1	2	3	4	5	6	7	8	9	10	1	2	3	4	5	6	7	8	9	10	1	2	3	4	5	6	7	8	9	10	1	2	3	4	5	6	7	8	9	10	1	2	3	4	5	6	7	8	9	10	1	2	3	4	5	6	7	8	9	10	1	2	3	4	5	6	7	8	9	10	1	2	3	4	5	6	7	8	9	10	1	2	3	4	5	6	7	8	9	10	1	2	3	4	5	6	7	8	9	10	1	2	3	4	5	6	7	8	9	10	1	2	3	4	5	6	7	8	9	10	1	2	3	4	5	6	7	8	9	10	1	2	3	4	5	6	7	8	9	10	1	2	3	4	5	6	7	8	9	10	1	2	3	4	5	6	7	8	9	10	1	2	3	4	5	6	7	8	9	10	1	2	3	4	5	6	7	8	9	10	1	2	3	4	5	6	7	8	9	10	1	2	3	4	5	6	7	8	9	10	1	2	3	4	5	6	7	8	9	10	1	2	3	4	5	6	7	8	9	10	1	2	3	4	5	6	7	8	9	10	1	2	3	4	5	6	7	8	9	10	1	2	3	4	5	6	7	8	9	10	1	2	3	4	5	6	7	8	9	10	1	2	3	4	5	6	7	8	9	10	1	2	3	4	5	6	7	8	9	10	1	2	3	4	5	6	7	8	9	10	1	2	3	4	5	6	7	8	9	10	1	2	3	4	5	6	7	8	9	10	1	2	3	4	5	6	7	8	9	10	1	2	3	4	5	6	7	8	9	10	1	2	3	4	5	6	7	8	9	10	1	2	3	4	5	6	7	8	9	10	1	2	3	4	5	6	7	8	9	10	1	2	3	4	5	6	7	8	9	10	1	2	3	4	5	6	7	8	9	10	1	2	3	4	5	6	7	8	9	10
Param: Rank 0 n + n n	1.12228	0.665043	1.48779	0.710034	0.568264	0.86835	1.08518	0.845189	0.96321	0.944486	0.53467	1.06349	0.662533	1.40895	1.04499	1.22562	1.30767	0.522169	1.22845	0.788709	1.06546	0.750726	1.19642	0.611175	0.838452	0.648493	1.01083	0.640848	1.01801	0.708885	1.00797	1.18885	0.559046	0.671729	1.44703	1.30549	0.832639	1.14429	0.565227	0.909143	1.07565	0.941389	1.19276	1.0023	0.86702	1.19328	1.20682	1.47565	1.25757	1.23613	1.33503	1.01601	1.01209	0.988743	1.08779	1.04968	1.32009	0.684357	0.91559	1.13203	0.615948	0.883153	1.09171	1.20023	1.2053	1.3718	1.17758	0.737746	0.787851	0.924314	0.679238	1.30051	0.529127	1.15555	0.949827	1.01078	0.80414	1.09674	0.532957	0.623723	0.734011	0.687636	1.01332	1.42401	1.24343	1.13017	1.34501	0.958718	0.638688	1.23783	1.28217	0.923101	0.857162	1.22095	1.04719	1.34944	1.29738	1.12682	0.512364	0.551874	0.522251	1.23706	1.07704	1.02769	0.599175	1.47491	1.44647	1.31323	0.99026	1.18684	1.17461	0.740964	0.775584	0.931431	0.529054	0.629753	0.517228	1.3038	1.31429	0.711794	1.23595	1.25423	0.8822	0.523474	1.14787	1.23563	1.09189	0.816178	1.04056	0.820619	1.37075	1.15162	0.750697	0.876962	0.831282	0.53975	1.18657	1.37821	1.02546	0.503219	1.36376	0.571981	1.23289	0.972729	1.11613	1.32014	0.563068	0.522727	0.773417	0.685877	1.32093	0.721213	0.588676	1.4289	1.32905	1.15124	1.29016	1.29783	0.524292	0.561747	1.18264	0.692756	1.48094	1.0694	0.658855	0.78849	1.35606	0.817012	0.737858	0.884612	0.541306	1.43485	1.24066	1.48014	1.38548	1.15142	1.03353	1.21476	0.838934	0.811967	0.506556	0.983723	0.728337	0.72577	1.19323	0.994929	0.683774	1.36928	0.691843	1.08707	0.845682	0.811988	0.63907	0.889757	1.01007	0.844397	0.851096	1.24711	1.04371	1.39365	0.683057	0.744023	0.582349	0.681159	1.29501	0.782173	1.36668	0.796815	0.60014	0.604098	0.695004	1.07068	0.884147	1.41874	0.720417	1.30909	0.822907	0.779475	1.28624	0.50696	0.851769	1.16245	1.46767	1.38381	1.01608	0.820744	1.48129	0.691895	1.01588	1.42879	1.48391	0.897386	1.04323	1.43393	1.2561	1.46158	0.671681	1.07799	0.822814	0.64413	0.789279	1.19032	0.543158	1.31795	0.757187	1.02702	0.695916	1.37245	0.559183	1.1597	0.785189	1.24411	1.29383	1.14322	1.14467	0.98225	0.860519	0.691306	0.675787	0.584239	0.807525	0.954629	1.10534	1.16218	0.908904	1.09367	1.30574	1.45891	1.10315	0.84589	1.01579	1.39851	0.943561	1.48045	1.30132	0.59955	0.933362	1.46292	0.632749	0.917251	0.596866	0.743357	1.11236	0.604408	1.21328	0.823595	0.609146	1.43108	0.828171	1.08963	1.32907	1.00381	1.29424	0.639837	0.621003	1.49533	0.851053	1.28549	0.738461	0.588807	0.900413	1.36879	0.953041	0.880101	1.15565	0.674194	1.09662	1.07958	0.772528	1.00681	0.756752	0.983427	1.18504	0.880316	1.41961	1.07643	1.35194	1.03527	1.32426	0.875871	0.933636	1.20386	1.08765	0.896628	1.1736	0.62307	1.48288	0.774655	0.596007	0.732948	1.14167	1.37934	1.28011	1.07093	1.06993	1.28497	0.544662	0.768008	1.13364	0.597164	1.10061	0.671586	0.577537	1.07879	1.41702	0.62045	0.90708	0.757837	0.765916	1.32327	0.921591	1.01644	1.45657	0.524342	1.12737	0.745458	0.985577	1.09767	1.30003	0.913157	0.883457	1.28046	0.843297	0.564632	1.08676	1.09278	0.547252	1.43129	1.31185	0.763983	1.15887	0.687079	0.64194	1.31044	0.780112	1.34186	1.05134	1.16118	0.723189	1.0723	0.6648	0.630036	1.00814	1.25476	0.883296	0.617474	1.18046	1.01069	1.18759	0.973408	1.20177	1.199	0.582349	0.623225	1.16432	0.663039	1.32239	0.784531	1.24314	1.45436	0.69445	1.40656	0.845646	0.634113	1.40645	1.16524	0.73412	0.646664	0.543539	1.29398	0.762527	0.799237	0.790794	0.563062	0.62716	1.38286	0.531019	0.627778	0.554297	0.735599	0.513142	1.43693	1.26362	0.808516	1.3767	1.07018	1.48018	0.654378	1.43329	1.04008	0.610282	0.68577	1.3472	0.634091	0.660983	0.572635	1.14009	1.05962	1.16061	0.727704	0.859691	1.18966	0.537492	1.38549	0.662713	0.942821	0.851099	0.866313	1.36604	1.27772	0.67558	1.27319	0.89303	0.726136	0.882243	1.12393	1.10756	1.43912	0.978682	0.610733	1.43836	1.26601	1.03797	0.997789	0.763746	0.684213	1.15524	0.631522	0.691256	0.701087	1.21964	0.868625	1.00553	0.698709	0.509565	0.821922	0.551176	1.22535	1.25222	1.16226	0.840833	0.993485	1.40857	1.144	0.641636	0.973655	0.806745	1.46532	0.587919	0.996468	0.65477	0.914182	1.2701	1.08183	1.21994	1.26769	1.31746	1.3577	0.920443	1.07957	0.553577	1.49606	1.48579	0.80169	0.713207	1.11133	1.26978	1.27137	1.44211	0.866802	1.1232	0.750785	0.802735	1.11541	0.990272	1.09387	1.49988	1.01078	0.564533	1.3351	0.894445	0.973192	1.40361	1.43555	0.966351	0.501301	1.19111	1.12871	1.46183	1.00318	0.558363	1.41083	0.791507	0.775718	0.502337	0.591745	1.40225	0.80614	1.01696	0.946813	0.866519	1.40108	1.03849	1.06613	0.796776	0.919649	0.825834	0.52477	0.87191	0.600432	1.2776	1.48397	0.547186	1.08368	1.18499	1.2726	0.667929	0.559507	1.24384	0.967173	1.30378	1.21459	1.46046	1.15951	1.17003	1.46806	0.862883	1.13423	0.94533	0.714022	0.650726	0.685374	1.23973	1.43153	1.44845	1.31396	0.654432	0.980752	1.43921	1.31338	0.988368	0.698314	0.548282	1.09933	0.524992	0.560429	1.47248	0.874412	0.764646	1.00457	0.544375	1.41595	0.618094	1.02372	1.11244	0.925215	0.608694	0.766703	1.30363	0.56114	0.727608	0.880405	1.03501	1.08028	1.15298	1.40394	1.45892	0.570591	1.18772	1.07913	0.769706	1.48611	0.814811	1.31621	0.917207	0.879761	1.19127	0.633557	0.502035	1.09618	0.702319	0.605312	1.1458	1.45347	0.853631	0.532356	0.740997	0.929148	1.1825	0.675809	1.49177	0.777095	0.720639	0.561241	1.33394	1.06748	1.18735	1.11912	0.89906	1.21784	1.21975	1.19948	0.804216	1.1417	0.696651	1.49715	0.851874	0.656116	1.28457	1.08679	0.769562	1.45373	0.618353	0.655245	0.740489	0.85863	1.45027	1.01467	0.969697	0.500006	0.759499	0.867556	0.78093	1.37238	0.934124	0.776767	1.41649	0.903955	1.36299	1.01579	1.32626	0.646443	0.912705	1.35453	0.643851	1.37028	0.761178	0.633405	1.11094	1.07791	0.615747	0.516744	1.43591	0.636231	1.45885	1.08302	1.43322	0.796111	1.36007	0.524367	1.4623	1.07758	0.956012	1.06411	0.834386	0.636822	1.22967	1.45359	1.04848	0.713618	1.40726	0.687135	1.08531	0.980262	1.43008	0.529236	1.05706	1.28438	1.40183	0.521679	1.14737	0.724663	0.827499	1.26355	0.615234	1.04995	0.832442	0.601678	0.694652	0.637325	1.47206	0.756259	1.02787	1.20522	0.51201	0.635349	0.683201	0.86597	0.609592	1.01533	1.48117	0.566074	0.97957	0.86263	0.826845	0.732136	0.84635	1.37053	1.27132	1.40856	1.23015	0.985026	0.996214	1.4587	1.33178	1.12771	1.312	0.846061	0.945769	0.525911	1.02742	1.11293	0.867164	1.44919	1.11147	0.772879	1.00146	0.672206	0.864629	0.784482	0.671463	0.639884	0.853386	0.53166	0.99278	1.36634	0.538809	0.658363	1.11482	1.04372	1.02265	0.501972	0.882113	1.13706	1.31644	1.4365	1.20745	1.00244	1.22995	0.650233	0.696891	0.704093	0.628038	1.12879	1.39814	0.739789	1.32361	0.607314	0.776647	0.731332	1.18466	1.02089	1.10041	0.952888	0.535008	0.882257	0.642256	1.39267	1.10693	0.568314	1.49479	0.951776	0.6602	1.0949	0.641342	1.18326	0.66727	0.730527	1.30694	1.4186	1.13057	0.529845	0.805893	0.609039	1.10078	0.970712	1.11073	0.507906	0.817195	1.43287	0.708676	1.42717	0.995345	1.3751	0.99272	1.44717	0.788365	0.591353	1.02912	0.799106	0.69909	0.757662	0.732868	0.789502	1.35016	1.04932	1.18999	1.46844	1.06686	1.35812	0.519626	0.698351	1.11052	1.3618	0.503859	1.3659	0.748698	1.32782	0.538829	0.984787	0.781286	0.724729	1.01863	1.40188	0.60765	0.868418	0.651077	0.748754	0.760497	0.506892	1.36128	0.949308	0.934714	1.36656	1.1896	1.39032	1.36985	0.681557	0.719152	1.0065	0.666352	0.637646	1.47546	1.40739	1.01942	0.692009	0.735741	0.921502	0.771148	1.19017	0.920896	0.889645	1.31286	1.0949	0.594202	1.05357	1.35363	0.734315	1.13256	0.725699	1.1159	0.569759	0.613697	0.932824	0.9226	0.931069	1.47882	0.930754	1.49092	0.925526	1.31702	1.0662	1.14205	0.975158	1.25409	0.770346	1.25787	0.694742	0.810742	0.505489	1.11931	0.731401	1.47223	1.16981	1.31075	1.15295	1.28229	0.528123	0.832748	1.19123	0.974292	1.43837	1.14239	1.15959	0.944876	0.526315	0.667258	0.60224	1.01481	0.961433	0.654141	0.841074	0.609731	0.643383	1.10223	0.987891	1.27822	0.645493	0.563574	0.651634	1.34408	1.10306	0.987855	0.879943	1.14328	0.944013	1.41257	1.18028	1.02782	1.33494	0.69696	0.80218	1.23091	0.631947	0.752032	0.530294	1.15179	1.42389	1.05891	0.965556	1.3141	0.541205	0.985735	0.674854	1.09399	0.736043	1.48815	1.26477	1.20018	0.748455	0.883664	1.26616	0.519121	0.537349	0.568487	0.909071	1.03556	0.906977	1.39657	1.49395	0.740794	0.918684	1.03046	0.986288	0.558673	1.0439	1.14566	1.21854	0.8616	1.32579	0.511011	0.814604	1.2074	0.683222	0.610012	0.699563	1.03256	0.726309	0.653205	1.41552
Param: App 0 n + n n	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
Param: Value 0 n + n n	99.7442	90.1118	106.72	104.889	102.575	93.9236	95.5759	92.3448	97.0279	98.8525	106.774	94.0632	108.942	97.8311	109.251	94.3482	107.143	101.387	107.914	101.883	91.836	101.809	102.827	95.4489	94.886	93.5284	90.6601	95.5899	103.118	100.037	92.5207	101.324	106.493	109.229	105.649	94.6379	100.101	95.5517	108.061	101.468	97.8299	90.1402	103.772	98.897	92.5418	97.7341	92.1112	109.065	94.86	104.566	99.6344	98.6901	90.0008	93.7596	91.0079	92.3679	101.619	90.4511	103.427	109.848	109.354	97.0235	99.539	93.3822	100.529	102.962	103.378	103.993	97.2193	106.981	109.201	105.84	92.4689	101.587	96.837	99.0909	105.593	92.6205	104.384	95.8418	108.889	93.292	95.2932	94.0243	98.0953	103.327	91.4637	92.5809	92.1209	105.464	108.586	103.819	109.975	106.686	106.622	92.2821	102.331	92.7419	105.281	101.517	94.2714	95.6493	99.641	95.6444	96.9178	105.003	92.2906	103.963	108.157	97.1267	96.6258	98.6786	94.4739	93.1431	95.1505	94.2783	103.093	100.671	107.426	92.4444	108.287	97.869	97.6126	99.8659	97.6483	106.346	105.823	98.5021	107.556	106.974	101.438	107.899	108.382	106.884	102.523	97.0412	104.6	95.3257	108.841	105.856	96.9831	107.092	95.0391	102.169	90.365	98.7448	95.6309	94.301	97.2438	92.6659	104.959	96.2922	106.631	97.0463	94.6935	92.5922	93.9504	109.265	92.5184	106.182	97.4732	93.0513	91.2052	107.73	93.1508	96.8685	91.6265	108.571	105.528	90.3557	105.01	106.246	106.594	107.085	95.2373	92.5206	106.023	92.161	105.528	90.6368	94.5498	92.4035	104.339	105.709	94.7643	94.5552	108.66	109.727	93.958	108.884	90.9104	94.4508	90.4492	98.2716	91.419	91.0745	102.189	94.0563	107.19	107.342	94.155	109.741	97.53	98.7075	103.077	102.241	90.52	102.48	101.716	104.892	103.679	94.1625	101.206	91.6131	102.888	92.7543	106.687	109.489	97.5387	92.4138	90.0315	100.852	95.9842	99.1783	90.6615	95.1824	103.422	97.2519	92.8236	106.559	109.406	106.266	97.5689	105.957	98.1953	98.9821	106.315	94.5551	96.6361	103.104	108.26	100.27	93.3992	101.984	99.672	102.855	104.799	91.6319	106.833	103.783	98.9563	99.1696	102.659	104.355	101.541	107.732	97.9843	107.985	99.4371	95.4974	93.8727	92.0162	106.796	104.446	98.1725	92.7399	99.3442	105.972	109.717	100.352	96.0786	103.879	102.556	90.0055	98.9744	105.311	101.794	96.9286	108.613	90.6251	99.3642	93.98	92.76	99.1376	100.275	110	109.238	105.877	95.8499	109.982	101.096	102.842	96.9957	95.0339	107.158	102.847	96.6873	98.1856	91.1227	101.512	100.856	101.433	103.238	98.0311	99.8441	96.371	96.6415	108.497	94.0323	104.954	106.929	106.893	96.8698	102.279	106.264	97.7383	99.8823	102.29	102.214	97.4795	103.574	101.109	98.0557	101.369	101.701	92.2161	97.9828	98.3633	92.908	102.16	97.3129	97.5255	101.28	96.5052	93.4279	93.8529	90.7933	104.881	102.414	109.491	94.926	95.5803	91.3873	105.701	92.1402	103.703	91.7321	107.17	90.4833	105.932	109.944	98.9021	109.793	109.464	93.1869	100.99	101.662	92.2026	100.986	109.459	92.7837	100.637	91.2577	106.927	93.8052	103.974	104.832	99.4997	104.607	93.9726	98.6165	107.437	99.205	99.1523	103.667	92.4857	107.044	104.432	105.184	102.015	91.1869	92.5447	108.988	92.9334	93.961	106.284	98.4769	103.455	93.3697	95.6667	100.476	105.969	103.125	96.4165	109.844	108.512	95.1277	98.7902	96.2797	108.84	103.365	103.041	107.525	100.592	98.9024	93.4069	91.8729	95.6446	107.409	108.419	103.219	92.1817	103.761	107.323	107.727	101.223	99.3334	94.9099	108.36	108.264	105.067	90.0764	103.287	100.948	101.661	101.959	93.5261	90.4772	100.259	109.277	93.3083	96.0278	107.723	108.732	96.6462	90.3215	99.0913	100.978	106.563	96.4681	104.17	99.741	97.6953	99.5069	95.2958	94.0783	100.35	107.809	106.791	91.8307	90.6008	98.1175	96.1572	104.678	93.3153	95.0071	105.133	93.4492	98.1812	99.3393	100.526	102.907	97.2238	91.2048	93.563	101.301	109.341	106.871	93.0846	103.489	97.6085	100.664	100.511	96.6714	98.0738	91.5643	93.6871	96.443	95.7574	93.2486	103.172	96.7021	96.5116	96.3675	109.11	102.828	96.1824	90.0333	99.104	92.8052	90.7537	93.2574	109.454	107.647	96.5463	96.9854	97.0865	95.6519	92.3288	93.4515	92.0292	107.033	106.288	102.046	90.0956	90.8377	94.4078	99.4351	93.6994	103.409	92.0174	101.152	100.881	109.837	95.0913	90.6237	105.194	93.3457	97.5008	95.0544	102.833	109.71	98.5722	109.709	107.961	98.7502	109.219	93.3081	93.6376	91.0962	94.679	109.966	102.583	108.62	98.4592	95.8233	107.646	109.508	107.398	105.157	92.0494	104.91	108.515	100.369	99.8224	95.2257	100.067	105.422	107.93	93.8629	102.413	107.068	101.939	99.9955	104.168	105.643	92.9555	105.706	108.235	105.54	91.4327	98.7864	100.881	105.326	99.6375	108.893	106.613	108.04	109.893	94.5714	105.304	93.3687	93.7924	95.3983	91.0387	109.506	95.2631	100.443	107.671	97.4555	100.985	97.9862	107.267	103.746	95.9901	109.393	102.137	104.969	91.6955	108.217	95.6566	105.174	94.7167	106.134	106.307	100.967	100.836	103.768	103.794	105.564	98.141	97.5087	109.394	99.0646	104.064	108.046	106.384	96.0293	103.224	105.866	96.863	94.8602	95.5279	103.342	92.1985	100.99	109.086	94.2013	96.7121	91.4608	104.046	105.921	100.9	98.1735	109.485	98.1992	104.916	94.8845	101.13	97.7477	91.075	99.0577	93.271	103.178	99.6286	108.05	90.2316	99.276	95.3147	97.6676	97.0861	97.5463	91.9771	97.8187	92.6563	93.4245	93.8334	108.822	101.182	93.2324	109.876	101.314	97.5916	98.7658	99.3989	102.963	90.6468	106.166	95.6552	108.429	94.2764	107.843	100.593	90.4353	91.4571	101.793	96.0244	91.652	93.2937	106.033	104.593	95.3717	97.5791	101.533	107.13	104.926	95.0149	95.6816	94.9085	92.3433	94.3249	93.4585	105.823	109.284	96.9988	99.8651	92.8649	97.0625	98.0105	100.996	98.783	101.038	100.909	101.494	104.378	99.7297	101.753	103.627	98.289	101.086	109.384	109.643	109.698	101.674	106.614	102.04	98.135	96.1212	107.17	100.306	97.4924	98.1645	103.633	95.8574	101.895	106.155	101.373	100.431	94.008	108.314	94.3413	94.9405	98.2442	95.6158	97.0374	93.2787	109.19	109.958	96.6574	103.981	90.2229	95.2873	96.6539	106.456	91.6479	107.867	97.7044	90.8681	99.9967	101.277	91.8149	97.9331	98.401	107.36	94.0831	100.341	93.2002	105.604	90.4331	103.729	93.9493	99.4864	99.5552	91.8368	106.272	105.368	95.1984	106.839	103.352	90.0008	99.2807	92.602	106.127	105.784	91.1839	106.032	108.535	105.229	104.905	94.1442	103.161	95.5938	103.049	100.131	107.973	101.705	103.815	105.541	95.7318	105.861	105.627	94.1751	95.9171	99.4784	101.246	109.56	109.087	109.735	108.369	95.0732	108.199	97.9298	101.018	109.462	95.2578	105.429	99.3621	90.1036	105.655	100.128	107.836	95.0131	102.726	108.461	105.412	102.942	105.754	95.4427	92.3999	90.4081	106.59	109.64	98.3735	95.8959	106.701	108.919	92.9741	91.7363	103.581	99.4638	109.174	90.8321	94.2932	107.955	93.6082	98.5848	97.5436	105.514	91.5451	91.88	108.896	109.093	97.2411	101.934	107.437	101.74	105.048	94.2321	107.38	106.472	106.574	106.349	104.499	104.763	98.302	109.966	105.971	106.822	99.1705	104.84	101.854	107.984	100.239	105.604	109.317	91.9375	92.1781	99.0292	90.084	98.6071	102.067	97.7418	98.3492	104.077	103.678	107.229	98.3368	91.4742	98.0741	103.819	107.593	107.922	104.81	102.509	98.4987	104.652	94.3089	106.341	104.782	105.217	96.5666	102.56	90.4092	92.9199	94.572	97.8359	109.164	94.7367	99.1546	95.1766	102.671	91.0098	106.485	98.404	106.783	98.7154	90.556	102.456	101.976	97.5154	92.1904	103.615	94.0593	94.3725	90.9653	102.807	92.0451	91.5788	105.712	109.749	103.35	105.254	103.537	95.5713	100.763	99.0896	98.2567	96.598	106.717	94.8496	90.3503	102.637	106.77	100.619	103.557	104.067	104.309	106.031	107.076	94.3348	93.6919	105.002	106.306	94.7065	97.0194	94.0785	102.047	100.893	107.408	107.358	96.2066	94.9358	109.572	105.734	98.0203	105.377	105.103	108.892	104.505	95.414	107.958	93.9046	104.598	94.2268	102.833	109.44	108.134	109.837	101.486	92.6036	102.674	96.1505	93.0074	105.139	106.587	99.7542	90.8698	99.4066	97.0887	97.1051	103.957	106.446	96.0574	95.507	90.6076	104.506	93.1012	105.412	97.4841	96.9318	93.2359	90.7732	109.345	101.362	90.6994	98.8128	98.2563	93.6396	90.2492	103.78	93.0886	99.1768	101.341	108.662	97.3722	96.5568	101.089	107.578	101.642	99.4955
Param: obs_x 0 n + n n	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0

SIM_NUM 1
SEED 10
MAX_STEP 500
EQUATION fun_demand.cpp
 MODELREPORT report_Monopoly1.html

DESCRIPTION

Object_Root
(no description available)
END_DESCRIPTION

Variable_Init
(no description available)
_INIT_

END_DESCRIPTION

Variable_ResetNum
(no description available)
_INIT_

END_DESCRIPTION

Object_Demand
(no description available)
_INIT_

END_DESCRIPTION

Variable_Action
(no description available)
_INIT_

END_DESCRIPTION

Variable_ActionReplace
(no description available)
_INIT_

END_DESCRIPTION

Variable_TotAgent
(no description available)
_INIT_

END_DESCRIPTION

Parameter_AvDeviation
(no description available)
_INIT_

END_DESCRIPTION

Object_Group
(no description available)
_INIT_

END_DESCRIPTION

Parameter_TimeActive
(no description available)
_INIT_

END_DESCRIPTION

Parameter_NumContagion
(no description available)
_INIT_

END_DESCRIPTION

Parameter_RadioReduction
(no description available)
_INIT_

END_DESCRIPTION

Parameter_IdDemand
(no description available)
_INIT_

END_DESCRIPTION

Variable_IssuerId
(no description available)
_INIT_

END_DESCRIPTION

Parameter_TimeRepl
(no description available)
_INIT_

END_DESCRIPTION

Parameter_NoNewAgent
(no description available)
_INIT_

END_DESCRIPTION

Parameter_CoeffDeviation
(no description available)
_INIT_

END_DESCRIPTION

Parameter_MaxDeviation
(no description available)
_INIT_

END_DESCRIPTION

Parameter_MinDeviation
(no description available)
_INIT_

END_DESCRIPTION

Parameter_Delta
(no description available)
_INIT_

END_DESCRIPTION

Object_Agent
(no description available)
_INIT_

END_DESCRIPTION

Parameter_IdAgent
(no description available)
_INIT_

END_DESCRIPTION

Parameter_IdParent
(no description available)
_INIT_

END_DESCRIPTION

Parameter_CurrCont
(no description available)
_INIT_

END_DESCRIPTION

Parameter_MaxCont
(no description available)
_INIT_

END_DESCRIPTION

Parameter_Active
(no description available)
_INIT_

END_DESCRIPTION

Parameter_Date
(no description available)
_INIT_

END_DESCRIPTION

Parameter_IdChoice
(no description available)
_INIT_

END_DESCRIPTION

Variable_Deviation
(no description available)
_INIT_

END_DESCRIPTION

Object_AgCh
(no description available)
_INIT_

END_DESCRIPTION

Parameter_AIdCh
(no description available)
_INIT_

END_DESCRIPTION

Parameter_ARank
(no description available)
_INIT_

END_DESCRIPTION

Parameter_AProb
(no description available)
_INIT_

END_DESCRIPTION

Parameter_AValue
(no description available)
_INIT_

END_DESCRIPTION

Parameter_Minimum
(no description available)
_INIT_

END_DESCRIPTION

Parameter_QualityType
(no description available)
_INIT_
 All 10 instances equal to 1.
END_DESCRIPTION

Parameter_tau
(no description available)
_INIT_
 All 10 instances equal to 1.
END_DESCRIPTION

Object_Supply
(no description available)
_INIT_

END_DESCRIPTION

Variable_Choose
(no description available)
_INIT_

END_DESCRIPTION

Parameter_MinProb
(no description available)
_INIT_

END_DESCRIPTION

Variable_InvHerfindal
(no description available)
_INIT_

END_DESCRIPTION

Function_SetARank
(no description available)
_INIT_

END_DESCRIPTION

Variable_ChooseTTB
(no description available)
_INIT_

END_DESCRIPTION

Parameter_RangeRank
(no description available)
_INIT_

END_DESCRIPTION

Variable_TotNum
(no description available)
_INIT_

END_DESCRIPTION

Variable_Adopt
(no description available)
_INIT_

END_DESCRIPTION

Parameter_CounterChUsed
(no description available)
_INIT_

END_DESCRIPTION

Variable_AvChUsed
(no description available)
_INIT_

END_DESCRIPTION

Function_TTB
(no description available)
_INIT_

END_DESCRIPTION

Object_Prod
(no description available)
_INIT_

END_DESCRIPTION

Variable_MS
(no description available)
_INIT_
 All 100 instances equal to 0.01.
END_DESCRIPTION

Parameter_IdProd
(no description available)
_INIT_
 All 100 instances increasing from 1 with steps 1. The value is increased every 1 instances.
END_DESCRIPTION

Parameter_Num
(no description available)
_INIT_

END_DESCRIPTION

Parameter_Mark
(no description available)
_INIT_

END_DESCRIPTION

Variable_InstallBase
(no description available)
_INIT_

END_DESCRIPTION

Parameter_Cancelled
(no description available)
_INIT_

END_DESCRIPTION

Parameter_PercNew
(no description available)
_INIT_

END_DESCRIPTION

Parameter_PercCan
(no description available)
_INIT_

END_DESCRIPTION

Variable_MSInstall
(no description available)
_INIT_
 All 10 instances equal to 0.1.
END_DESCRIPTION

Parameter_app
(no description available)
_INIT_

END_DESCRIPTION

Parameter_ChUsed
(no description available)
_INIT_

END_DESCRIPTION

Parameter_curr_x
(no description available)
_INIT_

END_DESCRIPTION

Object_Ch
(no description available)
_INIT_

END_DESCRIPTION

Parameter_IdCh
(no description available)
_INIT_

END_DESCRIPTION

Parameter_Rank
(no description available)
_INIT_
 All 1000 instances set to random values drawn from a uniform in the range [0.5,1.5].
END_DESCRIPTION

Parameter_App
(no description available)
_INIT_

END_DESCRIPTION

Parameter_Value
(no description available)
_INIT_
 All 1000 instances set to random values drawn from a uniform in the range [90,110].
END_DESCRIPTION

Parameter_obs_x
(no description available)
_INIT_

END_DESCRIPTION


DOCUOBSERVE

END_DOCUOBSERVE


DOCUINITIAL

END_DOCUINITIAL


EQ_FILE
#include "fun_head.h"
object *turboskip(int n);
int *prodlist;
object **l;
#define MAX_AGENT 30000
object *last, *first;




MODELBEGIN


/***********************
Adopt
************************/
FUNCTION("Adopt") 
/*
Install the ch's values in the agent's place
*/
    
v[0]=VS(c,"IdChoice");
cur=SEARCH_CND("IdProd",v[0]);

CYCLES(c, cur1, "AgCh")
 {
  v[1]=VS(cur1,"AIdCh");
  cur2=SEARCH_CND("IdCh",v[1]);
  v[2]=VS(cur2,"Value");
  WRITES(cur1,"AValue",v[2]);
 }

RESULT(1)

/***********************
SetARank
************************/
FUNCTION("SetARank") 
/*
Assign the consumer's preferences.
*/
v[2]=V("RangeRank");

//Set App in each Ch and each Prod equal to the actual ranking times MSInstall
//with a RND equal to RangeRank
v[3]=V("Delta");

//v[3]=c->up->cal("Delta",0);
for(cur=p; cur!=NULL; cur=go_brother(cur))
 {v[0]=cur->cal("MSInstall",1);
  v[1]=p->cal("MinProb",0);
  if(v[0]<v[1])
   v[0]=v[1];
  for(cur1=cur->search("Ch"); cur1!=NULL; cur1=go_brother(cur1) )
   {v[34]=pow( cur1->cal("Rank",0)*v[0]*(1 + v[2]*(RND-0.5)),v[3]);
    cur1->write("App",v[34], 0);

   } 
 }
//Init to zero the ARank
for(cur=c->search("AgCh"); cur!=NULL; cur=go_brother(cur) )
 cur->write("ARank",0,0);

//Set the AProb
for(cur1=c->search("AgCh"); cur1!=NULL; cur1=go_brother(cur1) )
 {for(cur2=p; cur2!=NULL; cur2=go_brother(cur2) )
   {cur=cur2->search_var_cond("IdCh",cur1->cal("AIdCh",0),0);
    cur1->increment("AProb",cur->cal("App",0));
   }
 }

if(debug_flag==1)
  deb(c, c, "Observe", &res);

//Set final ranking: 1 the most important, 2 the second and so on.
for(v[0]=1, cur=p->search("Ch"); cur!=NULL; cur=go_brother(cur), v[0]++ ) //simply a counter
 {
//  if(t==94)
  // plog("bah");
  cur1=c->draw_rnd("AgCh", "AProb", 0);
  if(cur1->cal("AProb",0)==0)
  { plog("Warning: draw item with prob==0\nInit data error\n");
    res=-1;
    deb(cur1, c, "Error", &res);
  }

  cur1->write("AProb",0,0);
  cur1->write("ARank",v[0], 0);
 }



c->lsdqsort("AgCh", "ARank","UP");
res=1;
goto end;
}

/***********************
ChooseTTB
************************/
FUNCTION("ChooseTTB") 

/*
Apply the Take-The-Best strategy, or lexicographic preferences to the decision of which product to buy.
All existing products are initially scanned for a potential choice. Preferences are taken from the consumer who requested the computation for this equation (c->).
*/


//Init all products
for(cur=p->search("Prod"); cur!=NULL; cur=go_brother(cur))
 cur->write("Mark",1,0);

v[3]=p->cal("Tolerance",0);//it is the minimum percentage of the max value
//that a ch's value must have to avoid be discarded; ex. Tolerance = 0.8 means
// that a ch's value less than 0.8 of the maximum will be discarded

v[5]=c->cal("Deviation",0);
//Deviation is the width of probability when reading the characteristics' values.
//the ch's value are drawn by a random normal distribution whose mean is the
//actual value of ch. and the deviation is Deviation

v[10]=0; //this is the counter of the number of characteristic necesary to make a decision
//For every characteristics
for(v[0]=2,cur1=c->search("AgCh"); cur1!=NULL && v[0]>1; cur1=go_brother(cur1), v[10]++ )
 {v[1]=cur1->cal("AIdCh",0);
   //Set every product
  for(cur=p->search("Prod"); cur!=NULL; cur=go_brother(cur))
    {if(cur->cal("Mark",0)==1)
     {
      cur2=cur->search_var_cond("IdCh",v[1],0);
      v[6]=norm(v[7]=cur2->cal("Value",0),v[5]);
      if(v[6]<0)
      {sprintf(msg, "Warning: Value observed below zero\nMean %lf, Dev %lf, Norm %lf\n", v[7], v[5], v[6]);
       plog(msg);
        v[6]=0;
      }

      cur->write("PApp",v[6], 0);
     }
     else
      cur->write("PApp",0,0);
    }
  p->lsdqsort("Prod","PApp","DOWN");
  cur2=p->search("Prod");
  v[2]=cur2->cal("PApp",0);
  if(v[2]==0)
  {f=fopen("log.log","a");
   fprintf(f,"Merda. Division by zero in TTB\n");
   plog("Merda. Division by zero in TTB\n");
   INTERACT("Division by 0 ttb", 1);
   fclose(f);
  }

  //Kill worst products
  for(v[0]=1,cur2=cur2->next; cur2!=NULL;cur2=go_brother(cur2) )
   {v[4]=cur2->cal("PApp",0);
    if(v[4]/v[2]>=v[3])
     v[0]++;
    else
     cur2->write("Mark",0,0);
   }

  p->lsdqsort("Prod","IdProd","UP");
 }


p->increment("CounterChUsed",v[10]);


cur=p->draw_rnd("Prod","Mark",0);
cur->increment("ChUsed",v[10]);
res=cur->cal("IdProd",0);

goto end;

}

  

if(!strcmp(label, "Init") )
{
/*
Technical initialization function. It is computed only once and then it is
transformed in a parameter and never computed again.

Sets the global point 'prod' pointing to the first products, so
to speed up the access to these objects

Defines a vector of pointers so that objects 'Agent' can be accessed quickly
*/




param=1;
//prod=p->search("Prod");
l=(object **)malloc(sizeof(object *)*MAX_AGENT);
cur=p->search("Agent");
l[0]=cur;
res=1;
goto end;
}


/*****************************
MSInstall
******************************/
if(!strcmp(label, "MSInstall") )
{
v[0]=p->cal("InstallBase",0);
v[1]=p->up->up->cal("TotAgent",0);
res=v[0]/v[1];
goto end;
}

/*****************************
Action
******************************/
if(!strcmp(label, "Action") )
{
/*
Actual core of the model, as demand is concerned. The function searches for
any existing agent that is "ready" to trigger the birth of another agent. When
found, a new agent is added to the model. The new agent is initialized as necessary and starts purchasing a product every given (random) periods.

New agents can introduce new agents, but each generation decreases the number of agents that can introduce.


*/

//When no more agents can be created these lines prevent the equation to be
//(uselessly) executed
if(p->cal("NoNewAgent",0)==1)
 {
  res=0;
  goto end;
 }

 v[0]=p->cal("TimeActive",0);

//The initialization of the very first agent at time of the first time step
if(p->cal("IdAgent",0)==-1)
 {cur=p->search("Agent");
  l[0]=cur;
  last=cur;
  first=cur;
  cur->write("IdAgent", p->cal("IssuerId",0),0);
  cur->write("Deviation",p->cal("MaxDeviation",0),1);
  cur->write("IdChoice",v[10]=p->cal(cur,"Choose",0),0);
  p->cal(cur, "Adopt",0);
  cur->write("MaxCont",p->cal("NumContagion",0),0);
  v[13]=rnd_integer(v[0],0);
  cur->write("Active",v[13],0);

  //Add to the supply statistics
  cur1=p->search_var_cond("IdProd",v[10],0);
  cur1->increment("Num",1);
  
 }
v[20]=p->cal("MaxDeviation",0);


v[16]=p->cal("RadioReduction",0);
for(v[30]=0,v[12]=0,cur=first; cur!=NULL; cur=cur->next )
 {
  if( (cur->cal("CurrCont",0))<(v[6]=cur->cal("MaxCont",0)) )
   { if(v[30]==0)
      { v[13]=cur->cal("IdAgent",0);
        first=l[(int)(v[13]-1)];
      }
     v[30]=1;
   if( (cur->cal("Active",0))==1)
    {
     v[12]++;
     v[13]=rnd_integer(v[0],0);
     cur->write("Active",v[13],0);
     cur1=p->son->add_an_object("Agent",cur); //added from Group
     cur1->write("Deviation",v[20],t);
     cur1->write("Date",(double)t, 0);
     cur1->write("IdAgent",v[10]=p->cal("IssuerId",0),0);
     if(v[10]>=MAX_AGENT)
      {plog("Error: to many Agent's. Change MAX_AGENT value in the function file\n");
       quit=2;
       res=0;
       goto end;
      }
     l[(int)(v[10]-1)]=cur1;
     last=cur1;

     cur1->write("CurrCont",0,0);
     v[13]=rnd_integer(v[0],0);
     cur1->write("Active",v[13],0);

     v[5]=max(0,(cur->cal("MaxCont",0)-v[16]));
     cur1->write("MaxCont",v[5],0);
     cur->increment("CurrCont",1);


     cur1->write("IdChoice",v[31]=p->cal(cur1, "Choose",0),0);
     p->cal(cur1, "Adopt",0);
     cur2=p->search_var_cond("IdProd",v[31],0);
     cur2->increment("Num",1);

    }
   else
    cur->increment("Active",1);
  }

 }

if(v[30]==0)
 p->son->write("NoNewAgent",1,0);
res=v[12];
goto end;
}




/*****************************
TotAgent
******************************/
if(!strcmp(label, "TotAgent") )
{
/*
Total number of agents in the model
*/
res=val[0]+p->up->cal("Action",0);
goto end;
}

/*****************************
IssuerId
******************************/
if(!strcmp(label, "IssuerId") )
{
/*
Provides identification numbers for new entering buyers
*/

last_update--;
if(c==NULL)
 {res=val[0];
 goto end;
 }
res=val[0]+1;
goto end;
}


/*****************************
IssuerIdProd
******************************/
if(!strcmp(label, "IssuerIdProd") )
{
/*
Provides identification numbers for new entering producers
*/

last_update--;
if(c==NULL)
 {res=val[0];
 goto end;
 }
res=val[0]+1;
goto end;
}


/*****************************
InvHerfindal
******************************/
if(!strcmp(label, "InvHerfindal") )
{
/*
(inverse) concentration index.
*/
for(v[0]=0,cur=p->search("Prod"); cur!=NULL; cur=go_brother(cur) )
  {
  v[1]=cur->cal("MSInstall",0);
  v[0]+=v[1]*v[1];
  v[2]=cur->cal("Num",0);
  if(v[2]!=0)
    cur->multiply("ChUsed",1/v[2]);
  }
if(v[0]==0)
 res=0;
else
 res=1/v[0];
goto end;

}

/*****************************
Choose
******************************/
if(!strcmp(label, "Choose") )
{

/*
Decisional function used by new entering buyers only. Creates preferences and then calls the usual ChooseTTB

*/
last_update--;
res=-2;
if(c==NULL)
 goto end;
p->cal(c, "SetARank",0);
res=p->cal(c,"ChooseTTB",0);
goto end;
}




/*****************************
MS
******************************/
if(!strcmp(label, "MS") )
{
/*
Market shares of daily sales (there are also the shares of install bases).
The equation computes also the percentage (over install bases) of new buyers and of defectors.
*/
v[0]=p->cal("TotNum",0);
v[1]=p->cal("Num",0);
v[2]=p->cal("Cancelled",0);
v[3]=p->cal("InstallBase",0);
if(v[3]>0)
  {p->write("PercNew",v[1]/v[3], 0);
   p->write("PercCan",v[2]/v[3],0);
  }
else
  {p->write("PercNew",0, 0);
   p->write("PercCan",0,0);
  }


if(v[0]==0)
 res=0;
else
 res=v[1]/v[0];
goto end;
}

/*****************************
InstallBase
******************************/
if(!strcmp(label, "InstallBase") )
{
/*
Install base for a product is modified by new buyers (+) and by defectors (-)
*/
v[1]=p->cal("Num",0);
v[0]=p->cal("Cancelled",0);

res=val[0]+v[1]-v[0];
goto end;
}


/*****************************
ResetNum
******************************/
if(!strcmp(label, "ResetNum") )
{
/*
Clean up parameters used to store statistics during a single time step
*/
for(cur=p->search("Prod"); cur!=NULL; cur=cur->next)
 {cur->write("Num",0,0);
  cur->write("Cancelled",0,0);
  cur->write("ChUsed",0,0);

 }
cur=p->search("Supply");
cur->write("CounterChUsed",0, 0);

res=0;
goto end;
}

if(!strcmp(label, "AvChUsed"))
{
/*
Average number of characteristics used during the decision algorithm
*/
v[0]=p->cal("CounterChUsed",0);
v[1]=p->cal("TotNum",0);
if(v[1]>0)
 res=v[0]/v[1];
else
 res=0; 
goto end;
}


/*****************************
TotNum
******************************/
if(!strcmp(label, "TotNum") )
{
/*
Total sales
*/
p->cal("ActionReplace",0);
res=p->sum("Num",0);
goto end;
}

/*****************************
Deviation
******************************/
if(!strcmp(label, "Deviation") )
{
/*
Deviation used when "reading" the correct values of products' characteristics.
The higher CoeffDeviation (in [0,1]) the faster the convergence to MinDeviation. =1 =>Deviation=MinDeviation immediately; 
=0 Deviation never change.
*/
v[0]=p->up->cal("CoeffDeviation",0);
v[1]=p->up->cal("MinDeviation",0);
res=val[0]+v[0]*(v[1]-val[0]);
//if(t==25)
 //INTERACT("Che cazzo", res);

goto end;
}

/*****************************
TicTolerance
******************************/
if(!strcmp(label, "TicTolerance") )
{
/*
Change tolerance values. If this Variable is not inserted in the model Tolerance never change.
Actually, this Variable is used only rarely.
*/
if(val[0]<0)
 {res=100;
  p->increment("Tolerance",0.01);
 } 
else
 res=val[0]-1;

goto end;
}

/*****************************
ActionReplace
******************************/
if(!strcmp(label, "ActionReplace") )
{
/*
Scans all buyers and manage the statistic collection for buyers (if the actually buy something).
*/
v[1]=p->cal("TimeRepl",0);

v[4]=p->cal("TotAgent",0);
for(v[12]=v[29]=v[28]=0,cur=l[0]; cur!=NULL; cur=cur->next )
 {v[29]+=cur->cal("Deviation",0);
  v[28]++;
  v[0]=cur->cal("Date",0);
  if(v[0]+v[1]+RND*v[1]<(double)t)
   {
    v[7]=p->cal(cur, "ChooseTTB",0);
    cur->write("Date",(double)t,0);
    v[5]=cur->cal(cur, "IdChoice",0);
    if(v[7]!=v[5])
     v[12]++;
    cur1=p->search_var_cond("IdProd",v[5],0);
    cur1->increment("Cancelled", 1);
    cur1=p->search_var_cond("IdProd",v[7],0);
    cur1->increment("Num",1);
    cur->write("Date",(double)t,0);
    cur->write("IdChoice",v[7],0);
    p->cal(cur, "Adopt",0);

   } //end IF time to replace
 } //end FOR cycle through agents
p->write("AvDeviation",v[29]/v[28], 0);
res=v[12];
goto end;
}

sprintf(msg, "\nFunction for %s not found", label);
plog(msg);
quit=2;
return -1;


end :
if( (isnan(res)==1 || isinf(res)==1) && quit!=1)
 { 
  sprintf(msg, "At time %d the equation for '%s' produces the non-valid value '%lf'. Check the equation code and the temporary values v\\[...\\] to find the faulty line.",t, label, res );
  error(msg);

  debug_flag=1;
  debug='d';
 } 

if(debug_flag==1)
 {
 for(i=0; i<40; i++)
  i_values[i]=v[i];
 }

return(res);
}




object *turboskip(int n)
{
register object *c;

return l[n-1];
register int i;
i=n/500;
c=l[i];
i=500*i;
for(; i<n; c=c->next, i++);

return c;
}

void close_sim(void)
{
free(l);
}


END_EQ_FILE
