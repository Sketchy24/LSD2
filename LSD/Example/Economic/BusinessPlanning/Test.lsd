	
Label Root
{
	Son: Statistics
	Label Statistics
	{
		Son: Firm
		Label Firm
		{
			Son: Market
			Label Market
			{
				Var: Price
				Var: Demand
				Param: CoeffDemand
				Param: DeltaDemand
				Param: DeltaWage
				Param: ProdDemand
				Var: ActualDemand
				Param: MaxDemand
				Param: MinDemand
				Param: CentralWage
				Var: Wage

			}

			Son: Produce
			Label Produce
			{
				Param: DeltaCostInput
				Param: CentralCostInput
				Var: CostInput

			}

			Var: Profit
			Var: Cost
			Var: Asset
			Var: Production
			Param: MarkUp
			Var: Revenue
			Var: Sales
			Param: CoeffSmoothing

		}

		Var: AvRevenue
		Param: MaxRevenue
		Param: MinRevenue
		Param: VarRevenue
		Var: AvProfit
		Param: MaxProfit
		Param: MinProfit
		Param: VarProfit

	}


}


DATA

Object: Root C	1

Object: Statistics C	1
Var: AvRevenue 0 s + d n
Param: MaxRevenue 0 s + n n	0
Param: MinRevenue 0 s + n n	0
Param: VarRevenue 0 s + n n	0
Var: AvProfit 0 s + n p
Param: MaxProfit 0 s + n p	0
Param: MinProfit 0 s + n p	0
Param: VarProfit 0 s + n n	0

Object: Firm C	100
Var: Profit 0 s + n n
Var: Cost 0 n + n n
Var: Asset 1 s + n n	1000	1000	1000	1000	1000	1000	1000	1000	1000	1000	1000	1000	1000	1000	1000	1000	1000	1000	1000	1000	1000	1000	1000	1000	1000	1000	1000	1000	1000	1000	1000	1000	1000	1000	1000	1000	1000	1000	1000	1000	1000	1000	1000	1000	1000	1000	1000	1000	1000	1000	1000	1000	1000	1000	1000	1000	1000	1000	1000	1000	1000	1000	1000	1000	1000	1000	1000	1000	1000	1000	1000	1000	1000	1000	1000	1000	1000	1000	1000	1000	1000	1000	1000	1000	1000	1000	1000	1000	1000	1000	1000	1000	1000	1000	1000	1000	1000	1000	1000	1000
Var: Production 1 s + n n	90	90	90	90	90	90	90	90	90	90	90	90	90	90	90	90	90	90	90	90	90	90	90	90	90	90	90	90	90	90	90	90	90	90	90	90	90	90	90	90	90	90	90	90	90	90	90	90	90	90	90	90	90	90	90	90	90	90	90	90	90	90	90	90	90	90	90	90	90	90	90	90	90	90	90	90	90	90	90	90	90	90	90	90	90	90	90	90	90	90	90	90	90	90	90	90	90	90	90	90
Param: MarkUp 0 n + n n	0.05	0.05	0.05	0.05	0.05	0.05	0.05	0.05	0.05	0.05	0.05	0.05	0.05	0.05	0.05	0.05	0.05	0.05	0.05	0.05	0.05	0.05	0.05	0.05	0.05	0.05	0.05	0.05	0.05	0.05	0.05	0.05	0.05	0.05	0.05	0.05	0.05	0.05	0.05	0.05	0.05	0.05	0.05	0.05	0.05	0.05	0.05	0.05	0.05	0.05	0.05	0.05	0.05	0.05	0.05	0.05	0.05	0.05	0.05	0.05	0.05	0.05	0.05	0.05	0.05	0.05	0.05	0.05	0.05	0.05	0.05	0.05	0.05	0.05	0.05	0.05	0.05	0.05	0.05	0.05	0.05	0.05	0.05	0.05	0.05	0.05	0.05	0.05	0.05	0.05	0.05	0.05	0.05	0.05	0.05	0.05	0.05	0.05	0.05	0.05
Var: Revenue 0 s + n n
Var: Sales 0 s + n n
Param: CoeffSmoothing 0 n + n n	0.95	0.95	0.95	0.95	0.95	0.95	0.95	0.95	0.95	0.95	0.95	0.95	0.95	0.95	0.95	0.95	0.95	0.95	0.95	0.95	0.95	0.95	0.95	0.95	0.95	0.95	0.95	0.95	0.95	0.95	0.95	0.95	0.95	0.95	0.95	0.95	0.95	0.95	0.95	0.95	0.95	0.95	0.95	0.95	0.95	0.95	0.95	0.95	0.95	0.95	0.95	0.95	0.95	0.95	0.95	0.95	0.95	0.95	0.95	0.95	0.95	0.95	0.95	0.95	0.95	0.95	0.95	0.95	0.95	0.95	0.95	0.95	0.95	0.95	0.95	0.95	0.95	0.95	0.95	0.95	0.95	0.95	0.95	0.95	0.95	0.95	0.95	0.95	0.95	0.95	0.95	0.95	0.95	0.95	0.95	0.95	0.95	0.95	0.95	0.95

Object: Market C	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1
Var: Price 1 s + n n	2	2	2	2	2	2	2	2	2	2	2	2	2	2	2	2	2	2	2	2	2	2	2	2	2	2	2	2	2	2	2	2	2	2	2	2	2	2	2	2	2	2	2	2	2	2	2	2	2	2	2	2	2	2	2	2	2	2	2	2	2	2	2	2	2	2	2	2	2	2	2	2	2	2	2	2	2	2	2	2	2	2	2	2	2	2	2	2	2	2	2	2	2	2	2	2	2	2	2	2
Var: Demand 1 s + n n	100	100	100	100	100	100	100	100	100	100	100	100	100	100	100	100	100	100	100	100	100	100	100	100	100	100	100	100	100	100	100	100	100	100	100	100	100	100	100	100	100	100	100	100	100	100	100	100	100	100	100	100	100	100	100	100	100	100	100	100	100	100	100	100	100	100	100	100	100	100	100	100	100	100	100	100	100	100	100	100	100	100	100	100	100	100	100	100	100	100	100	100	100	100	100	100	100	100	100	100
Param: CoeffDemand 0 n + n n	0.9	0.9	0.9	0.9	0.9	0.9	0.9	0.9	0.9	0.9	0.9	0.9	0.9	0.9	0.9	0.9	0.9	0.9	0.9	0.9	0.9	0.9	0.9	0.9	0.9	0.9	0.9	0.9	0.9	0.9	0.9	0.9	0.9	0.9	0.9	0.9	0.9	0.9	0.9	0.9	0.9	0.9	0.9	0.9	0.9	0.9	0.9	0.9	0.9	0.9	0.9	0.9	0.9	0.9	0.9	0.9	0.9	0.9	0.9	0.9	0.9	0.9	0.9	0.9	0.9	0.9	0.9	0.9	0.9	0.9	0.9	0.9	0.9	0.9	0.9	0.9	0.9	0.9	0.9	0.9	0.9	0.9	0.9	0.9	0.9	0.9	0.9	0.9	0.9	0.9	0.9	0.9	0.9	0.9	0.9	0.9	0.9	0.9	0.9	0.9
Param: DeltaDemand 0 n + n n	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1
Param: DeltaWage 0 n + n n	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1	0.1
Param: ProdDemand 0 n + n n	0.5	0.5	0.5	0.5	0.5	0.5	0.5	0.5	0.5	0.5	0.5	0.5	0.5	0.5	0.5	0.5	0.5	0.5	0.5	0.5	0.5	0.5	0.5	0.5	0.5	0.5	0.5	0.5	0.5	0.5	0.5	0.5	0.5	0.5	0.5	0.5	0.5	0.5	0.5	0.5	0.5	0.5	0.5	0.5	0.5	0.5	0.5	0.5	0.5	0.5	0.5	0.5	0.5	0.5	0.5	0.5	0.5	0.5	0.5	0.5	0.5	0.5	0.5	0.5	0.5	0.5	0.5	0.5	0.5	0.5	0.5	0.5	0.5	0.5	0.5	0.5	0.5	0.5	0.5	0.5	0.5	0.5	0.5	0.5	0.5	0.5	0.5	0.5	0.5	0.5	0.5	0.5	0.5	0.5	0.5	0.5	0.5	0.5	0.5	0.5
Var: ActualDemand 1 s + n n	110	110	110	110	110	110	110	110	110	110	110	110	110	110	110	110	110	110	110	110	110	110	110	110	110	110	110	110	110	110	110	110	110	110	110	110	110	110	110	110	110	110	110	110	110	110	110	110	110	110	110	110	110	110	110	110	110	110	110	110	110	110	110	110	110	110	110	110	110	110	110	110	110	110	110	110	110	110	110	110	110	110	110	110	110	110	110	110	110	110	110	110	110	110	110	110	110	110	110	110
Param: MaxDemand 0 n + n n	200	200	200	200	200	200	200	200	200	200	200	200	200	200	200	200	200	200	200	200	200	200	200	200	200	200	200	200	200	200	200	200	200	200	200	200	200	200	200	200	200	200	200	200	200	200	200	200	200	200	200	200	200	200	200	200	200	200	200	200	200	200	200	200	200	200	200	200	200	200	200	200	200	200	200	200	200	200	200	200	200	200	200	200	200	200	200	200	200	200	200	200	200	200	200	200	200	200	200	200
Param: MinDemand 0 n + n n	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10	10
Param: CentralWage 0 n + n n	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1
Var: Wage 1 n + n n	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1

Object: Produce C	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1
Param: DeltaCostInput 0 n + n n	0.2	0.2	0.2	0.2	0.2	0.2	0.2	0.2	0.2	0.2	0.2	0.2	0.2	0.2	0.2	0.2	0.2	0.2	0.2	0.2	0.2	0.2	0.2	0.2	0.2	0.2	0.2	0.2	0.2	0.2	0.2	0.2	0.2	0.2	0.2	0.2	0.2	0.2	0.2	0.2	0.2	0.2	0.2	0.2	0.2	0.2	0.2	0.2	0.2	0.2	0.2	0.2	0.2	0.2	0.2	0.2	0.2	0.2	0.2	0.2	0.2	0.2	0.2	0.2	0.2	0.2	0.2	0.2	0.2	0.2	0.2	0.2	0.2	0.2	0.2	0.2	0.2	0.2	0.2	0.2	0.2	0.2	0.2	0.2	0.2	0.2	0.2	0.2	0.2	0.2	0.2	0.2	0.2	0.2	0.2	0.2	0.2	0.2	0.2	0.2
Param: CentralCostInput 0 n + n n	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1
Var: CostInput 1 n + n n	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1

SIM_NUM 1
SEED 0
MAX_STEP 1000
EQUATION fun_BusinessPlanning.cpp
 MODELREPORT report_Compare.html

DESCRIPTION

Object_Root
(no description available)
END_DESCRIPTION

Object_Statistics
Statistics is an Object collecting statistics over the number of descending Objects Firm
_INIT_

END_DESCRIPTION

Variable_AvRevenue
Average revenue. It also compute other descriptive statistics on revenues.

'AvRevenue' appears in the equation for: (Never Used).
_INIT_

END_DESCRIPTION

Parameter_MaxRevenue
'MaxRevenue' appears in the equation for: AvRevenue.
_INIT_

END_DESCRIPTION

Parameter_MinRevenue
'MinRevenue' appears in the equation for: AvRevenue.
_INIT_

END_DESCRIPTION

Parameter_VarRevenue
'VarRevenue' appears in the equation for: AvRevenue.
_INIT_

END_DESCRIPTION

Variable_AvProfit
Average profits. It also compute other descriptive statistics.


'AvProfit' appears in the equation for: (Never Used).
_INIT_

END_DESCRIPTION

Parameter_MaxProfit
'MaxProfit' appears in the equation for: AvProfit.
_INIT_

END_DESCRIPTION

Parameter_MinProfit
'MinProfit' appears in the equation for: AvProfit.
_INIT_

END_DESCRIPTION

Parameter_VarProfit
'VarProfit' appears in the equation for: AvProfit.
_INIT_

END_DESCRIPTION

Object_Firm
Firm represents one independent firm, facing random events from its demand and production factor costs.
_INIT_

END_DESCRIPTION

Variable_Profit
Profits are computed as revenues minus costs

'Profit' appears in the equation for: AvProfit, Asset.
_INIT_

END_DESCRIPTION

Variable_Cost
Total cost is the production times total unit costs

'Cost' appears in the equation for: Profit.
_INIT_

END_DESCRIPTION

Variable_Asset
Cumulated profits

'Asset' appears in the equation for: Asset.
_INIT_

END_DESCRIPTION

Variable_Production
The production is computed from the previous period value plus a portion of its difference with the current actual demand

'Production' appears in the equation for: Cost, Production, Sales.
_INIT_

END_DESCRIPTION

Parameter_MarkUp
'MarkUp' appears in the equation for: Price.
_INIT_

END_DESCRIPTION

Variable_Revenue
Revenues computed just as sales times price.

'Revenue' appears in the equation for: AvRevenue, Profit.
_INIT_

END_DESCRIPTION

Variable_Sales
Sales are the minimum between the actual demand and the current production

'Sales' appears in the equation for: Revenue.
_INIT_

END_DESCRIPTION

Parameter_CoeffSmoothing
'CoeffSmoothing' appears in the equation for: CostInput, Wage.
_INIT_

END_DESCRIPTION

Object_Market
Market contains the elements concerning the demand of the firm.
_INIT_

END_DESCRIPTION

Variable_Price
Price is computed with a (uniform random) markup over the unit cost of production

'Price' appears in the equation for: Revenue.
_INIT_

END_DESCRIPTION

Variable_Demand
The demand is a random walk bounded within a max and min limit

'Demand' appears in the equation for: ActualDemand, Demand.
_INIT_

END_DESCRIPTION

Parameter_CoeffDemand
'CoeffDemand' appears in the equation for: ActualDemand.
_INIT_

END_DESCRIPTION

Parameter_DeltaDemand
'DeltaDemand' appears in the equation for: Demand.
_INIT_

END_DESCRIPTION

Parameter_DeltaWage
'DeltaWage' appears in the equation for: Wage.
_INIT_

END_DESCRIPTION

Parameter_ProdDemand
'ProdDemand' appears in the equation for: Production.
_INIT_

END_DESCRIPTION

Variable_ActualDemand
Actual demand is an average smoothing the Demand

'ActualDemand' appears in the equation for: Production, ActualDemand, Sales.
_INIT_

END_DESCRIPTION

Parameter_MaxDemand
'MaxDemand' appears in the equation for: Demand.
_INIT_

END_DESCRIPTION

Parameter_MinDemand
'MinDemand' appears in the equation for: Demand.
_INIT_

END_DESCRIPTION

Parameter_CentralWage
'CentralWage' appears in the equation for: Wage.
_INIT_

END_DESCRIPTION

Variable_Wage
The wage is a smoothing average over a random draw from a normal function

'Wage' appears in the equation for: Cost, Wage, Price.
_INIT_

END_DESCRIPTION

Object_Produce
Produce contains the elements of the firm concerning its production.
_INIT_

END_DESCRIPTION

Parameter_DeltaCostInput
'DeltaCostInput' appears in the equation for: CostInput.
_INIT_

END_DESCRIPTION

Parameter_CentralCostInput
'CentralCostInput' appears in the equation for: CostInput.
_INIT_

END_DESCRIPTION

Variable_CostInput
The cost of input is computed as a smoothing over a random draw from a normal function

'CostInput' appears in the equation for: Cost, CostInput, Price.
_INIT_

END_DESCRIPTION


DOCUOBSERVE

END_DOCUOBSERVE


DOCUINITIAL

END_DOCUINITIAL


EQ_FILE
#include "../src/fun_head.h"
#include "stdlib.h"

MODELBEGIN

if(!strcmp(label,"AvRevenue"))
{
/*
Average revenue. It also compute other descriptive statistics on revenues.
*/
p->stat("Revenue",v);
p->write("MaxRevenue",v[3], 0);
p->write("MinRevenue",v[4], 0);
p->write("VarRevenue",v[2], 0);
res=v[1];
goto end;
}

if(!strcmp(label, "Revenue"))
{
/*

Revenues computed just as sales times price.
*/

v[0]=p->cal("Sales",0);
v[1]=p->cal("Price",0);

res=v[1]*v[0];
goto end;
}

if(!strcmp(label,"AvProfit"))
{
/*
Average profits. It also compute other descriptive statistics.

*/
p->stat("Profit",v);
p->write("MaxProfit",v[3], 0);
p->write("MinProfit",v[4], 0);
p->write("VarProfit",v[2], 0);
res=v[1];
goto end;
}

if(!strcmp(label,"Profit"))
{
/*
Profits are computed as revenues minus costs
*/

v[0]=p->cal("Revenue",0);
v[1]=p->cal("Cost",0);

res=v[0]-v[1];
goto end;
}


if(!strcmp(label,"Asset"))
{
/*
Cumulated profits
*/
v[0]=p->cal("Asset",1);
v[1]=p->cal("Profit",0);
res=v[0]+v[1];
goto end;
}

if(!strcmp(label,"Cost"))
{
/*
Total cost is the production times total unit costs
*/
v[0]=p->cal("Production",0);
v[1]=p->cal("CostInput",0);

v[2]=p->cal("Wage",0);
res=v[0]*(v[1]+v[2]);
goto end;
}

if(!strcmp(label,"Production"))
{
/*
The production is computed from the previous period value plus a portion of its difference with the current actual demand
*/
v[0]=p->cal("Production",1);
v[1]=p->cal("ActualDemand",0);
v[2]=p->cal("ProdDemand",0);

res=v[0] + (v[1]-v[0])*v[2];
goto end;
}

if(!strcmp(label,"ActualDemand"))
{
/*
Actual demand is an average smoothing the Demand
*/
v[0]=p->cal("Demand",0);
v[1]=p->cal("CoeffDemand",0);
v[2]=p->cal("ActualDemand",1);
res=v[2]*v[1]+v[0]*(1-v[1]);
goto end;
}

if(!strcmp(label,"CostInput"))
{
/*
The cost of input is computed as a smoothing over a random draw from a normal function
*/
v[0]=p->cal("CentralCostInput",0);
v[1]=p->cal("DeltaCostInput",0);
v[2]=p->cal("CostInput",1);
v[3]=p->cal("CoeffSmoothing",0);

res=v[2]*v[3]+norm(v[0],v[1])*(1-v[2]);
goto end;
}

if(!strcmp(label,"Demand"))
{
/*
The demand is a random walk bounded within a max and min limit
*/
v[0]=p->cal("Demand",1);
v[1]=p->cal("DeltaDemand",0);
v[2]=p->cal("MaxDemand",0);
v[3]=p->cal("MinDemand",0);
v[6]=(RND-0.5)*2;
v[8]=(v[0]-v[3])/(v[2]-v[3])*v[6];
v[9]=v[8]*v[1];

res=v[0]+v[9];
goto end;
}

if(!strcmp(label,"Wage"))
{
/*
The wage is a smoothing average over a random draw from a normal function
*/
v[0]=p->cal("CentralWage",0);
v[1]=p->cal("DeltaWage",0);
v[2]=p->cal("Wage",1);
v[3]=p->cal("CoeffSmoothing",0);
res=v[2]*v[3]+norm(v[0],v[1])*(1-v[3]);
goto end;
}


if(!strcmp(label,"Sales"))
{
/*
Sales are the minimum between the actual demand and the current production
*/
v[0]=p->cal("Production",0);
v[1]=p->cal("ActualDemand",0);

res=min(v[0],v[1]);
goto end;
}

if(!strcmp(label,"Price"))
{
/*
Price is computed with a (uniform random) markup over the unit cost of production
*/
v[0]=p->cal("Wage",1);
v[2]=p->cal("CostInput",1);
v[1]=p->cal("MarkUp",0);
res=(v[0]+v[2])*(1+RND*v[1]);
goto end;
}

MODELEND

/*
This function is executed once at the end of a simulation run. It may be used
to perform some cleanup, in case the model allocated memory during the simulation.
*/
void close_sim(void)
{

}


END_EQ_FILE
