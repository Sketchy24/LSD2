	
Label Root
{
	Son: Pop
	Label Pop
	{
		Son: Agent
		Label Agent
		{
			Var: Fitness
			Param: Strategy

		}

		Var: Genetic
		Param: Replace
		Param: Variance
		Param: c1
		Param: c2
		Param: Omega
		Var: Mean
		Param: AvFitness

	}


}


DATA

Object: Root C	1

Object: Pop C	1
Var: Genetic 0 n + d n
Param: Replace 0 n + n n	10
Param: Variance 0 s + n n	0
Param: c1 0 n + n n	0.5
Param: c2 0 n + n n	1
Param: Omega 0 n + n n	2.47222
Var: Mean 1 s + d p	0.51387
Param: AvFitness 0 s + n n	0.2

Object: Agent C	500
Var: Fitness 1 n + n n	0.967884	0.337649	0.782441	0.603655	0.07906	0.812501	0.491953	0.346025	0.62078	0.17275	0.364745	0.12976	0.579938	0.905271	0.883009	0.815547	0.328941	0.272471	0.257385	0.772751	0.2263	0.838957	0.260414	0.631326	0.865371	0.076164	0.411574	0.091115	0.903025	0.902735	0.785278	0.421085	0.144475	0.784253	0.164052	0.264663	0.477068	0.510985	0.003166	0.867968	0.328548	0.773712	0.704011	0.757338	0.629103	0.073858	0.193478	0.345321	0.197345	0.256978	0.299645	0.870328	0.579997	0.936206	0.291461	0.720352	0.017886	0.77965	0.826302	0.470963	0.141487	0.757801	0.46804	0.753976	0.945637	0.603158	0.879114	0.163454	0.354513	0.026181	0.92143	0.777537	0.979689	0.726772	0.057888	0.766629	0.677923	0.701539	0.341276	0.003726	0.557316	0.419412	0.225844	0.307697	0.056944	0.179869	0.392642	0.275787	0.535058	0.586182	0.50311	0.970297	0.854738	0.961237	0.640054	0.665044	0.984211	0.724399	0.577806	0.148526	0.907297	0.816545	0.341783	0.003528	0.299969	0.055674	0.712053	0.631939	0.23139	0.823827	0.629211	0.246895	0.568624	0.957355	0.868342	0.98	0.733522	0.297909	0.366688	0.136464	0.266738	0.505722	0.283258	0.763135	0.050573	0.919201	0.069056	0.386521	0.622152	0.385088	0.419124	0.967979	0.955	0.806391	0.361359	0.014461	0.990204	0.633763	0.625805	0.77971	0.407386	0.308193	0.727102	0.649477	0.57879	0.009815	0.452628	0.324804	0.146545	0.049056	0.937378	0.519144	0.110354	0.627844	0.017444	0.29328	0.812462	0.98863	0.312119	0.356256	0.899652	0.168525	0.469603	0.346933	0.154076	0.686685	0.969937	0.681293	0.652574	0.865917	0.678505	0.378937	0.774755	0.724711	0.048374	0.118339	0.497939	0.952089	0.009103	0.471134	0.832044	0.864974	0.768172	0.611835	0.217991	0.022225	0.155511	0.852481	0.342132	0.594912	0.811749	0.589973	0.173398	0.699825	0.011796	0.061193	0.751968	0.204665	0.060693	0.731155	0.103573	0.334017	0.445584	0.154197	0.47897	0.671159	0.666522	0.253107	0.478379	0.015068	0.83184	0.165666	0.905737	0.555822	0.664434	0.972711	0.814564	0.80035	0.259851	0.351854	0.763721	0.526633	0.561284	0.790239	0.748513	0.776361	0.130523	0.177248	0.477943	0.603705	0.933377	0.927742	0.02133	0.462593	0.269898	0.265097	0.788484	0.638826	0.791383	0.780676	0.608153	0.793956	0.920769	0.485709	0.871946	0.051612	0.189729	0.116272	0.293319	0.489508	0.188702	0.549189	0.238094	0.898079	0.787636	0.051622	0.441277	0.220372	0.507629	0.704185	0.7138	0.220652	0.486241	0.287559	0.303165	0.319103	0.811464	0.727716	0.755436	0.371367	0.482247	0.689077	0.505899	0.24985	0.644058	0.824235	0.451761	0.252662	0.058415	0.725546	0.869497	0.509754	0.390246	0.228513	0.871767	0.156194	0.234183	0.457366	0.32901	0.991559	0.317395	0.045413	0.741863	0.484688	0.83848	0.846393	0.958606	0.159348	0.915325	0.607199	0.5681	0.316053	0.24149	0.171487	0.56239	0.524574	0.158876	0.685335	0.55449	0.426462	0.224717	0.389521	0.224934	0.584423	0.696488	0.334289	0.874361	0.877874	0.724444	0.037933	0.719762	0.404071	0.404644	0.593387	0.756009	0.629484	0.784842	0.133925	0.283702	0.168025	0.667242	0.342989	0.974235	0.26062	0.675596	0.134211	0.943346	0.429021	0.359825	0.743966	0.403439	0.056735	0.225823	0.851357	0.972757	0.216102	0.997413	0.176961	0.604161	0.043595	0.082666	0.254324	0.0305	0.312918	0.691808	0.245075	0.372509	0.426517	0.976583	0.355459	0.527388	0.554809	0.61179	0.288418	0.821063	0.610155	0.562242	0.665946	0.621066	0.560531	0.846762	0.75428	0.506511	0.428076	0.803333	0.693517	0.852954	0.473274	0.532315	0.132354	0.260827	0.176849	0.204158	0.186848	0.080714	0.818241	0.526183	0.761245	0.316818	0.286836	0.605077	0.824307	0.021566	0.293407	0.418583	0.237688	0.603351	0.130708	0.492777	0.067184	0.551974	0.158832	0.796427	0.822419	0.802026	0.220727	0.068833	0.576611	0.538972	0.098094	0.220997	0.29626	0.093063	0.240902	0.129397	0.16236	0.661523	0.530602	0.466357	0.183855	0.066045	0.668978	0.024862	0.656934	0.626019	0.936258	0.093714	0.959697	0.720413	0.478406	0.783041	0.155846	0.813534	0.754635	0.062724	0.252283	0.097286	0.337665	0.199347	0.56386	0.84459	0.130366	0.822796	0.725917	0.404809	0.573159	0.075721	0.227984	0.512454	0.856022	0.637476	0.178996	0.568987	0.469767	0.629632	0.788889	0.223884	0.472657	0.658707	0.130849	0.063762	0.375586	0.685278	0.030598	0.497896	0.768848	0.481599	0.743858	0.98588	0.625803	0.896409	0.125388	0.253803	0.725337	0.188694	0.289824	0.767518	0.020994	0.327586	0.15525	0.345965	0.87359	0.144689	0.776946	0.172456	0.850537	0.83462	0.655202	0.380367	0.102729	0.732799	0.454721	0.160741	0.75517	0.962501	0.116821	0.65784	0.567105	0.981654	0.386231
Param: Strategy 0 n + n n	0.002	0.004	0.006	0.008	0.01	0.012	0.014	0.016	0.018	0.02	0.022	0.024	0.026	0.028	0.03	0.032	0.034	0.036	0.038	0.04	0.042	0.044	0.046	0.048	0.05	0.052	0.054	0.056	0.058	0.06	0.062	0.064	0.066	0.068	0.07	0.072	0.074	0.076	0.078	0.08	0.082	0.084	0.086	0.088	0.09	0.092	0.094	0.096	0.098	0.1	0.102	0.104	0.106	0.108	0.11	0.112	0.114	0.116	0.118	0.12	0.122	0.124	0.126	0.128	0.13	0.132	0.134	0.136	0.138	0.14	0.142	0.144	0.146	0.148	0.15	0.152	0.154	0.156	0.158	0.16	0.162	0.164	0.166	0.168	0.17	0.172	0.174	0.176	0.178	0.18	0.182	0.184	0.186	0.188	0.19	0.192	0.194	0.196	0.198	0.2	0.202	0.204	0.206	0.208	0.21	0.212	0.214	0.216	0.218	0.22	0.222	0.224	0.226	0.228	0.23	0.232	0.234	0.236	0.238	0.24	0.242	0.244	0.246	0.248	0.25	0.252	0.254	0.256	0.258	0.26	0.262	0.264	0.266	0.268	0.27	0.272	0.274	0.276	0.278	0.28	0.282	0.284	0.286	0.288	0.29	0.292	0.294	0.296	0.298	0.3	0.302	0.304	0.306	0.308	0.31	0.312	0.314	0.316	0.318	0.32	0.322	0.324	0.326	0.328	0.33	0.332	0.334	0.336	0.338	0.34	0.342	0.344	0.346	0.348	0.35	0.352	0.354	0.356	0.358	0.36	0.362	0.364	0.366	0.368	0.37	0.372	0.374	0.376	0.378	0.38	0.382	0.384	0.386	0.388	0.39	0.392	0.394	0.396	0.398	0.4	0.402	0.404	0.406	0.408	0.41	0.412	0.414	0.416	0.418	0.42	0.422	0.424	0.426	0.428	0.43	0.432	0.434	0.436	0.438	0.44	0.442	0.444	0.446	0.448	0.45	0.452	0.454	0.456	0.458	0.46	0.462	0.464	0.466	0.468	0.47	0.472	0.474	0.476	0.478	0.48	0.482	0.484	0.486	0.488	0.49	0.492	0.494	0.496	0.498	0.5	0.502	0.504	0.506	0.508	0.51	0.512	0.514	0.516	0.518	0.52	0.522	0.524	0.526	0.528	0.53	0.532	0.534	0.536	0.538	0.54	0.542	0.544	0.546	0.548	0.55	0.552	0.554	0.556	0.558	0.56	0.562	0.564	0.566	0.568	0.57	0.572	0.574	0.576	0.578	0.58	0.582	0.584	0.586	0.588	0.59	0.592	0.594	0.596	0.598	0.6	0.602	0.604	0.606	0.608	0.61	0.612	0.614	0.616	0.618	0.62	0.622	0.624	0.626	0.628	0.63	0.632	0.634	0.636	0.638	0.64	0.642	0.644	0.646	0.648	0.65	0.652	0.654	0.656	0.658	0.66	0.662	0.664	0.666	0.668	0.67	0.672	0.674	0.676	0.678	0.68	0.682	0.684	0.686	0.688	0.69	0.692	0.694	0.696	0.698	0.7	0.702	0.704	0.706	0.708	0.71	0.712	0.714	0.716	0.718	0.72	0.722	0.724	0.726	0.728	0.73	0.732	0.734	0.736	0.738	0.74	0.742	0.744	0.746	0.748	0.75	0.752	0.754	0.756	0.758	0.76	0.762	0.764	0.766	0.768	0.77	0.772	0.774	0.776	0.778	0.78	0.782	0.784	0.786	0.788	0.79	0.792	0.794	0.796	0.798	0.8	0.802	0.804	0.806	0.808	0.81	0.812	0.814	0.816	0.818	0.82	0.822	0.824	0.826	0.828	0.83	0.832	0.834	0.836	0.838	0.84	0.842	0.844	0.846	0.848	0.85	0.852	0.854	0.856	0.858	0.86	0.862	0.864	0.866	0.868	0.87	0.872	0.874	0.876	0.878	0.88	0.882	0.884	0.886	0.888	0.89	0.892	0.894	0.896	0.898	0.9	0.902	0.904	0.906	0.908	0.91	0.912	0.914	0.916	0.918	0.92	0.922	0.924	0.926	0.928	0.93	0.932	0.934	0.936	0.938	0.94	0.942	0.944	0.946	0.948	0.95	0.952	0.954	0.956	0.958	0.96	0.962	0.964	0.966	0.968	0.97	0.972	0.974	0.976	0.978	0.98	0.982	0.984	0.986	0.988	0.99	0.992	0.994	0.996	0.998	1

SIM_NUM 1
SEED 2
MAX_STEP 2000
EQUATION fun_coor.cpp
 MODELREPORT modelreport.html

DESCRIPTION

Object_Root
(no description available)
END_DESCRIPTION

Object_Pop
(no description available)
_INIT_

END_DESCRIPTION

Variable_Genetic
(no description available)
_INIT_

END_DESCRIPTION

Parameter_Replace
(no description available)
_INIT_

END_DESCRIPTION

Parameter_Variance
(no description available)
_INIT_

END_DESCRIPTION

Parameter_c1
(no description available)
_INIT_

END_DESCRIPTION

Parameter_c2
(no description available)
_INIT_

END_DESCRIPTION

Parameter_Omega
(no description available)
_INIT_

END_DESCRIPTION

Variable_Mean
(no description available)
_INIT_

END_DESCRIPTION

Parameter_AvFitness
(no description available)
_INIT_

END_DESCRIPTION

Object_Agent
(no description available)
_INIT_

END_DESCRIPTION

Variable_Fitness
(no description available)
_INIT_

END_DESCRIPTION

Parameter_Strategy
(no description available)
_INIT_

END_DESCRIPTION


DOCUOBSERVE

END_DOCUOBSERVE


DOCUINITIAL

END_DOCUINITIAL


EQ_FILE
#include "../src/fun_head.h"

MODELBEGIN

EQUATION("Mean")
/*
Compute the mean strategy of the population. In the process compute also
the Variance of the strategy and the average fitness.

Note that the average fitness is computed with a lag because this equation is computed before
the fitness at present time. I chose this way to save one cycle through all the agents
*/
v[6]=v[0]=v[2]=v[3]=0;
CYCLE(cur, "Agent")
 {
  v[1]=VS(cur,"Strategy");
  v[0]+=v[1];
  v[3]+=v[1]*v[1];
  v[2]++;
  v[6]+=VLS(cur,"Fitness",1);
 }
 
v[5]=v[0]/v[2];
v[4]=v[3]/v[2]-v[5]*v[5];
WRITE("Variance",v[4]);
WRITE("AvFitness",v[6]/v[2]);
RESULT(v[5])


EQUATION("Fitness")
/*
Fitness = c1 - c2*|Strategy - Omega*Mean*(1-Mean)|

The fitness is computed as a function of the distance between Strategy and Mean
*/

v[0]=V("Strategy");
v[4]=V("Mean");
v[1]=V("c1");
v[2]=V("c2");
v[3]=V("Omega");
v[5]=v[1]-v[2]*abs(v[0]-v[3]*v[4]*(1-v[4]));

RESULT(v[5])

EQUATION("Genetic")
/*
Replace the strategy of worst agents with new agents (i.e. new strategies). The number of replaced agent is set by parameter Replace.

Note that the agents to remove are not physically removed, but their Strategy is overwritten 
with a new random number
*/

V("Mean"); //ensure that this equation is computed only after Mean has been computed
SORT("Agent", "Fitness", "UP"); //sort agents for increasing values of Fitness

v[1]=V("Replace"); //this is the number of agents to replace

//Starting from the first agent (worst Fitness) overwrites Strategy
v[0]=0;
CYCLE(cur, "Agent")
 {
 if(v[0]<v[1])
  WRITELS(cur,"Strategy",RND, t);
 else
  break;//interrupt the cycle 
 v[0]++; //increase the counter  
 }
   
   
RESULT(1)

MODELEND
/*
This function is executed once at the end of a simulation run. It may be used
to perform some cleanup, in case the model allocated memory during the simulation.
*/
void close_sim(void)
{

}



END_EQ_FILE
