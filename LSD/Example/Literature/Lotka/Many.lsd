	
Label Root
{
	Son: World
	Label World
	{
		Son: Sheep
		Label Sheep
		{
			Var: ActionSheep
			Param: SHunger
			Param: AgeSheep

		}

		Son: Wolf
		Label Wolf
		{
			Var: ActionWolf
			Param: Hunger
			Param: AgeWolf

		}

		Var: Action
		Param: NumSheep
		Param: NumWolf
		Param: ProbWReproduce
		Param: ProbSReproduce
		Param: MaxSheepHunting
		Param: MaxSHunger
		Param: MaxHunger
		Var: Hunt
		Var: NewSheep
		Var: NewWolf
		Param: MaxAgeSheep
		Param: MaxAgeWolf
		Param: MaxSheepFood
		Param: SheepEaten
		Param: SheepStarved
		Param: SheepAged
		Param: WolfAged
		Param: WolfStarved

	}


}


DATA

Object: Root C	1

Object: World C	1
Var: Action 0 n + d n
Param: NumSheep 0 s + n p	500
Param: NumWolf 0 s + n p	200
Param: ProbWReproduce 0 n + n n	0.01
Param: ProbSReproduce 0 n + n n	0.05
Param: MaxSheepHunting 0 n + n n	1000
Param: MaxSHunger 0 n + n n	5
Param: MaxHunger 0 n + n n	3
Var: Hunt 0 n + n n
Var: NewSheep 0 n + n n
Var: NewWolf 0 n + d n
Param: MaxAgeSheep 0 n + n n	1000
Param: MaxAgeWolf 0 n + n n	1000
Param: MaxSheepFood 0 n + n n	3000
Param: SheepEaten 0 s + n n	0
Param: SheepStarved 0 s + n n	0
Param: SheepAged 0 s + n n	0
Param: WolfAged 0 s + n n	0
Param: WolfStarved 0 s + n n	0

Object: Sheep C	500
Var: ActionSheep 0 n + n n
Param: SHunger 0 n + n n	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1
Param: AgeSheep 0 n + n n	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0

Object: Wolf C	200
Var: ActionWolf 0 n + n n
Param: Hunger 0 n + n n	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
Param: AgeWolf 0 n + n n	2.93513	18.6465	11.6558	19.313	13.5416	6.93672	14.8215	16.7719	6.92001	8.19595	2.14355	6.98345	2.18786	13.3181	8.99729	6.35039	11.2122	14.2332	4.26443	11.0179	19.2999	16.1656	9.94481	6.84342	19.4356	15.18	8.30984	9.69704	12.8178	18.6476	2.05327	5.20852	18.4722	17.1322	14.6264	13.0107	15.7996	14.6721	1.55684	5.54272	13.966	3.51236	2.00864	5.32825	10.6026	16.7402	3.49445	14.5191	15.1091	19.541	14.2606	19.1746	10.0749	16.7309	2.91138	5.21337	13.4107	11.9347	8.5316	11.7941	17.6688	13.1285	4.50887	8.61473	18.3433	9.47696	4.68435	10.6953	5.00089	8.19277	13.8706	6.3819	4.84556	19.4621	10.5655	11.8842	11.0632	18.2086	15.0062	18.1715	7.86505	12.9977	11.4716	15.3397	13.3301	13.8148	14.6998	13.9039	7.76572	14.137	9.24477	8.06434	3.28514	11.0726	13.1079	8.27053	3.77615	15.5278	18.7637	1.77725	14.9057	16.514	17.7803	10.6766	3.20922	13.4897	8.07243	14.2059	8.40099	13.5714	7.01585	15.5902	15.4464	11.2099	14.2322	3.65474	8.91084	15.5229	9.02556	6.04693	7.81955	10.3538	5.29457	1.53719	1.31711	1.32437	18.6976	18.8553	3.88411	15.2093	7.83976	9.55469	11.1725	5.58358	10.712	2.55665	5.15088	13.797	1.56333	18.7789	17.3906	11.2441	12.6199	2.81877	19.6386	18.7586	4.33984	19.154	16.3187	9.38459	19.4253	13.5608	12.2257	8.60999	7.16794	6.9345	11.3153	19.778	16.0481	17.1378	7.67096	7.70598	8.18069	9.38664	3.67561	11.9855	2.45882	6.13881	16.9358	6.9204	1.01657	1.03977	2.81498	11.1966	13.5322	4.76911	14.0204	12.8229	13.3421	5.30449	15.1109	11.6857	10.2718	6.64055	2.69809	10.6587	5.5358	9.72381	17.319	10.1087	12.7953	7.48029	13.2103	7.22608	4.52322	14.7964	18.004	2.18371	8.22418	7.92969

SIM_NUM 1
SEED 0
MAX_STEP 10000
EQUATION fun_Lotka.cpp
 MODELREPORT modelreport.html

DESCRIPTION

Object_Root
(no description available)
END_DESCRIPTION

Object_World
(no description available)

_INIT_

END_DESCRIPTION

Variable_Action
(no description available)
_INIT_

END_DESCRIPTION

Parameter_NumSheep
(no description available)

_INIT_


END_DESCRIPTION

Parameter_NumWolf
(no description available)
_INIT_

END_DESCRIPTION

Parameter_ProbWReproduce
(no description available)
_INIT_

END_DESCRIPTION

Parameter_ProbSReproduce
(no description available)
_INIT_

END_DESCRIPTION

Parameter_MaxSheepHunting
(no description available)
_INIT_

END_DESCRIPTION

Parameter_MaxSHunger
(no description available)
_INIT_

END_DESCRIPTION

Parameter_MaxHunger
(no description available)
_INIT_

END_DESCRIPTION

Variable_Hunt
(no description available)
_INIT_

END_DESCRIPTION

Variable_NewSheep
(no description available)
_INIT_

END_DESCRIPTION

Variable_NewWolf
(no description available)
_INIT_

END_DESCRIPTION

Parameter_MaxAgeSheep
(no description available)
_INIT_

END_DESCRIPTION

Parameter_MaxAgeWolf
(no description available)
_INIT_

END_DESCRIPTION

Parameter_MaxSheepFood
(no description available)
_INIT_

END_DESCRIPTION

Parameter_SheepEaten
(no description available)
_INIT_

END_DESCRIPTION

Parameter_SheepStarved
(no description available)
_INIT_

END_DESCRIPTION

Parameter_SheepAged
(no description available)
_INIT_

END_DESCRIPTION

Parameter_WolfAged
(no description available)
_INIT_

END_DESCRIPTION

Parameter_WolfStarved
(no description available)
_INIT_

END_DESCRIPTION

Object_Sheep
(no description available)
_INIT_

END_DESCRIPTION

Variable_ActionSheep
(no description available)
_INIT_

END_DESCRIPTION

Parameter_SHunger
(no description available)
_INIT_

END_DESCRIPTION

Parameter_AgeSheep
(no description available)
_INIT_

END_DESCRIPTION

Object_Wolf
(no description available)
_INIT_

END_DESCRIPTION

Variable_ActionWolf
(no description available)
_INIT_

END_DESCRIPTION

Parameter_Hunger
(no description available)
_INIT_

END_DESCRIPTION

Parameter_AgeWolf
(no description available)
_INIT_

END_DESCRIPTION


DOCUOBSERVE

END_DOCUOBSERVE


DOCUINITIAL

END_DOCUINITIAL


EQ_FILE
/***************************************************
****************************************************
LSD 2.0 - April 2000
written by Marco Valente
Aalborg University

Example for an equation file. Users should include in this header a
brief description of the model.

Include the equations in the space indicated below, after the line:

Place here your equations


****************************************************
****************************************************/

#include "../src/fun_head.h"

double variable::fun(object *caller)
{
//These are the local variables used by default
double v[40], res;
object *p, *c, *cur1, *cur2, *cur3, *cur4, *cur5;

//Declare here any other local variable to be used in your equations
//You may need an integer to be used as a counter
int i, j;
//and an object (a pointer to)
register object *cur;


if(quit==2)
 return -1;

p=up;
c=caller;
FILE *f;


//Uncommenting the following lines the file "log.log" will
//contain the name of the variable just computed.
//To be used in case of unexpected crashes. It slows down sensibly the simulation
/**
f=fopen("log.log","a");
 fprintf(f,"t=%d %s\n",t,label);
 fclose(f);
**/

//Place here your equations. They must be blocks of the following type

if(!strcmp(label, "ActionWolf"))
{
/*
Activities of the wolf.
If starving, it dies. Otherwise hunts and reproduce.
*/
v[0]=p->cal("Hunt",0); //hunting
if(v[0]==1)
  {p->write("Hunger",0, 0); //a sheep is eaten
   v[1]=0;
  } 
else
 v[1]=p->increment("Hunger",1);  //not sheep is eaten and the wold is more hungry

v[3]=p->cal("ProbWReproduce",0);
if(RND<v[3] )
  p->cal("NewWolf",0); //add a new wolf

v[2]=p->cal("MaxHunger",0);
if(v[1]>v[2])
 { //too hungry
  v[0]=p->cal("NumWolf",0); 
  if(v[0]>2)
    res=0;  //this wolf is going to starve
  else
    res=1;  //it is not killed if there are not enough wolfs

 }
else
 res=1; 
goto end;
}

if(!strcmp(label,"Hunt"))
{
/*
Hunting. It is a function activated only if a wolf requests it.
With a probability proportional to the density of sheep the wolf gets a dinner.

*/
last_update--;//repeat the computation any time is requested
if(c==NULL)//Avoids to be computed when the system activates the equation
{
res=-1;
goto end;
}

v[3]=p->cal("MaxHunger",0);
v[4]=c->cal("Hunger",0);
if(RND>v[4]/v[3]) //hunt only if hungry
 {res=0;
  goto end;
 } 

v[0]=p->cal("NumSheep",0);
if(v[0]<2)
 {res=0; //if there are too few sheep, then fail
  goto end;
 } 
v[1]=p->cal("MaxSheepHunting",0); //max number of sheep
if(RND<v[0]/v[1])
 {res=1;
  cur=p->draw_rnd("Sheep","SHunger",0); //choose randomly a sheep proportional to the hunger
  cur->delete_obj();
  p->increment("NumSheep",-1);	
  p->increment("SheepEaten",1);
 }
else
 res=0; //bad hunting
goto end;
}

if(!strcmp(label,"NewWolf"))
{
/*
Entry of a new wolf. It is a function activated only if it is requested by a wolf.
*/
last_update--;//repeat the computation any time is requested
if(c==NULL)//Avoids to be computed when the system activates the equation
{
res=-1;
goto end;
}


cur=p->search("Wolf"); //just for copy the structure of the Object Wolf
//cur1=p->add_an_object("Wolf", cur); //add a new wolf.
cur1=ADDOBJ_EX("Wolf",cur);
cur1->write("Hunger",0, 0); //initialize its hunger
cur1->write("AgeWolf",0, 0);
p->increment("NumWolf",1); //increase the number of wolfs
res=1;
goto end;
}



if(!strcmp(label,"NewSheep"))
{
/*
Add a new sheep. It is a function activated only if it is requested by a sheep
*/
last_update--;//repeat the computation any time is requested
if(c==NULL)//Avoids to be computed when the system activates the equation
{
res=-1;
goto end;
}
cur=p->search("Sheep"); //just for copy
//cur1=p->add_an_object("Sheep", cur);
cur1=ADDOBJ_EX("Sheep",cur);
cur1->write("SHunger",1, 0); //initialize the new sheep
cur1->write("AgeSheep",0, 0);
p->increment("NumSheep",1);
res=1;
goto end;
}

if(!strcmp(label,"ActionSheep"))
{
/*
Activities of a sheep. Eat, if there is some grass, and reproduce.
*/
v[1]=p->cal("SHunger",0);
v[2]=p->cal("MaxSHunger",0);
if(v[1]>v[2])
 { //starving sheep
  res=0;
  goto end;
 }
v[3]=p->cal("NumSheep",0);
v[4]=p->cal("MaxSheepFood",0);
if(RND>v[3]/v[4]) //probability to eat proportional to the density of sheep
 {v[5]=p->cal("SHunger",0);
  if(v[5]>2)
    p->increment("SHunger",-1); //if the sheep found some grass, it is less hungry
 }   
else
 p->increment("SHunger",1); //otherwise it is more hungry (beware of the wolfs)

v[6]=p->cal("ProbSReproduce",0);
if(RND<v[6])
 { //reproduce
  p->cal("NewSheep",0);
 }  

res=1;
goto end;
}

if(!strcmp(label,"Action"))
{
/*
General routine for a step.
First, all the sheep make die for age, otherwise do their activities and, if starving, they die. The all wolfs do the same
*/
//initialize some indicators
p->write("SheepEaten",0,0);
p->write("SheepStarved",0,0);
p->write("SheepAged",0,0);
p->write("WolfStarved",0,0);
p->write("WolfAged",0,0);

//update the sheep
v[3]=p->cal("MaxAgeSheep",0); //time to rest
for(cur=p->search("Sheep"); cur!=NULL; cur=cur1 )
 {
  cur1=go_brother(cur);
  v[1]=cur->increment("AgeSheep",1);
  if(v[1]>v[3])
   { //too old
   v[5]=p->increment("NumSheep",-1);
   if(v[5]>2)
    {cur->delete_obj(); //too few sheep, so it has to survive
     p->increment("SheepAged",1);
    }
   else
    p->increment("NumSheep",1);  

   } 
  else
   { //still young
    v[0]=cur->cal("ActionSheep",0);
    if(v[0]==0)
    {cur->delete_obj(); //starve to death
     p->increment("NumSheep",-1);
     p->increment("SheepStarved",1);
    } 
   }
 }
 
//update the wolfs
v[3]=p->cal("MaxAgeWolf",0); 
for(cur=p->search("Wolf"); cur!=NULL; cur=cur1 )
 {
  cur1=go_brother(cur);
  v[1]=cur->increment("AgeWolf",1);
  if(v[1]>v[3])
   { //to old
    cur->delete_obj();
    p->increment("NumWolf",-1);
    p->increment("WolfAged",1);
   } 
  else
   { //still young
    v[0]=cur->cal("ActionWolf",0);
    if(v[0]==0)
     {cur->delete_obj(); //starved
      p->increment("WolfStarved",1);
      p->increment("NumWolf",-1);
     } 
   }
 }
res=1;
goto end;
}


/*********************

Do not place equations beyond this point.

*********************/

sprintf(msg, "\nFunction for %s not found", label);
plog(msg);
quit=2;
return -1;


end :
if(debug_flag==1)
 {
 for(i=0; i<40; i++)
  i_values[i]=v[i];
 }

return(res);
}

/*
This function is executed once at the end of a simulation run. It may be used
to perform some cleanup, in case the model allocated memory during the simulation.
*/
void close_sim(void)
{

}













END_EQ_FILE
